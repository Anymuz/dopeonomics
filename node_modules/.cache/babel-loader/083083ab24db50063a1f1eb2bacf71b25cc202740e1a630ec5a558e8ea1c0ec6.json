{"ast":null,"code":"import React,{useState,useEffect,useCallback,useMemo}from'react';import{CheckCircle,FlaskConical,Factory,Heart,Users,Package,Beaker,BarChart2}from'lucide-react';// Import  components\nimport StorageService from'./StorageService';import AutoSave from'./AutoSave';import DopeyHeader from'./DopeyHeader';import CombinedStrainsTab from'./CombinedStrainsTab';import EffectBuilderTab from'./EffectBuilderTab';import ProductionPlanningTab from'./ProductionPlanningTab';import{SeedSelector}from'./IngredientComponents';import{CurrentMixDisplay}from'./MixDisplayComponents';import{SequentialIngredientsSelector}from'./SequentialIngredientsSelector';import{PackagingSelector,PriceMarginInputs}from'./PackagingComponents';import{ProfitInfoDisplay}from'./ProfitComponents';import{DrugTypeSelector}from'./DrugTypeSelector';import{NamePromptModal}from'./NamePromptModal';import SalesHistoryTab from'./SalesHistoryTab';import CrewManagementTab from'./CrewManagementTab';import SupplyManagementTab from'./SupplyManagementTab';// Import data\nimport{seedTypes,ingredients,additiveEffects,effectColors,drugTypes,calculateStrainEffects}from'./straindata';// Import pricing functions\nimport{calculateRecommendedPrice,calculateTotalUnits,calculateTotalCost,calculateProfit,calculateProfitMargin,calculateTotalBatchProfit,calculatePackagingProfit,calculateSalePriceFromMargin,calculateProductionPlan}from'./pricing';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StrainCreator=()=>{// State for strain creation\nconst[selectedSeed,setSelectedSeed]=useState(StorageService.loadSelectedSeed());const[selectedDrugType,setSelectedDrugType]=useState(StorageService.loadSelectedDrugType());const[currentMix,setCurrentMix]=useState(StorageService.loadCurrentMix()||[]);const[currentEffects,setCurrentEffects]=useState([]);const[mixingHistory,setMixingHistory]=useState([]);const[mixes,setMixes]=useState(StorageService.loadMixes()||[]);// Pricing and display states\nconst priceSettings=StorageService.loadPriceSettings()||{salePrice:0,targetMargin:'',priceMultiplier:1,packagingType:'baggies'};const[salePrice,setSalePrice]=useState(priceSettings.salePrice);const[targetMargin,setTargetMargin]=useState(priceSettings.targetMargin);const[priceMultiplier,setPriceMultiplier]=useState(priceSettings.priceMultiplier);const[packagingType,setPackagingType]=useState(priceSettings.packagingType);// UI states\nconst[activeTab,setActiveTab]=useState(StorageService.loadActiveTab()||'creator');const[showNamePrompt,setShowNamePrompt]=useState(false);// Supply management states\nconst[supplies,setSupplies]=useState(StorageService.loadSupplies()||{seeds:{},ingredients:{},packaging:{baggies:0,jars:0}});const[supplyHistory,setSupplyHistory]=useState(StorageService.loadSupplyHistory()||[]);// Sort and filter states\nconst sortSettings=StorageService.loadSortSettings()||{column:'name',direction:'asc'};const[sortColumn,setSortColumn]=useState(sortSettings.column);const[sortDirection,setSortDirection]=useState(sortSettings.direction);const[filterOptions,setFilterOptions]=useState(StorageService.loadFilterOptions()||{name:'',seedType:'',drugType:'',effect:''});// Production and sales states\nconst[productionPlans,setProductionPlans]=useState(StorageService.loadProductionPlans()||[]);const[salesHistory,setSalesHistory]=useState(StorageService.loadSalesHistory()||[]);// Crew management states\nconst[dealers,setDealers]=useState(StorageService.loadDealers()||[]);const[crewMembers,setCrewMembers]=useState(StorageService.loadCrewMembers()||{botanist:0,cleaner:0,handler:0,chemist:0});const[dealerTransactions,setDealerTransactions]=useState(StorageService.loadDealerTransactions()||[]);const[dailySales,setDailySales]=useState(StorageService.loadDailySales()||[]);// Reset everything when drug type changes\nuseEffect(()=>{setSelectedSeed(null);setCurrentMix([]);setCurrentEffects([]);setMixingHistory([]);StorageService.saveSelectedDrugType(selectedDrugType);},[selectedDrugType]);// Update effects when seed changes\nuseEffect(()=>{if(selectedSeed){// Reset mix when seed changes\nsetCurrentMix([]);const seedEffect=selectedSeed.effect;setCurrentEffects([seedEffect]);// Initialize mixing history with just the seed\nsetMixingHistory([{step:0,ingredient:\"Base Seed\",effectsBefore:[],effectsAfter:[seedEffect],changes:[`Added ${seedEffect}`]}]);StorageService.saveSelectedSeed(selectedSeed);// Update recommended price based on the seed's effect\nconst recommendedPrice=calculateRecommendedPrice([seedEffect],selectedDrugType);setSalePrice(recommendedPrice);}else{setCurrentEffects([]);setMixingHistory([]);}},[selectedSeed,selectedDrugType]);// Sequential ingredient addition method\nconst addIngredient=ingredient=>{// Add ingredient to the current mix\nconst updatedMix=[...currentMix,ingredient];setCurrentMix(updatedMix);// Recalculate effects using the sequential approach\nif(selectedSeed){const result=calculateStrainEffects(selectedSeed.effect,updatedMix);setCurrentEffects(result.finalEffects);setMixingHistory(result.mixingHistory);// Update recommended price\nconst recommendedPrice=calculateRecommendedPrice(result.finalEffects,selectedDrugType);setSalePrice(recommendedPrice);// Save to storage\nStorageService.saveCurrentMix(updatedMix);}};// Method to remove the last ingredient added\nconst removeLastIngredient=()=>{if(currentMix.length===0)return;const updatedMix=currentMix.slice(0,currentMix.length-1);setCurrentMix(updatedMix);// Recalculate effects using the sequential approach\nif(selectedSeed){const result=calculateStrainEffects(selectedSeed.effect,updatedMix);setCurrentEffects(result.finalEffects);setMixingHistory(result.mixingHistory);// Update recommended price\nconst recommendedPrice=calculateRecommendedPrice(result.finalEffects,selectedDrugType);setSalePrice(recommendedPrice);// Save to storage\nStorageService.saveCurrentMix(updatedMix);}};// Method to reset the mix completely\nconst resetMix=()=>{setCurrentMix([]);if(selectedSeed){setCurrentEffects([selectedSeed.effect]);setMixingHistory([{step:0,ingredient:\"Base Seed\",effectsBefore:[],effectsAfter:[selectedSeed.effect],changes:[`Added ${selectedSeed.effect}`]}]);// Update recommended price\nconst recommendedPrice=calculateRecommendedPrice([selectedSeed.effect],selectedDrugType);setSalePrice(recommendedPrice);// Save to storage\nStorageService.saveCurrentMix([]);}else{setCurrentEffects([]);setMixingHistory([]);}};// Method to finalize the mix and proceed to pricing/saving\nconst finalizeMix=()=>{if(currentMix.length>0&&selectedSeed){// Activate the save prompt\nsetShowNamePrompt(true);}};// Local wrapper functions for pricing calculations\nconst getTotalCost=useCallback(()=>{return calculateTotalCost(selectedSeed,currentMix);},[selectedSeed,currentMix]);const getProfit=useCallback(()=>{return calculateProfit(salePrice,selectedSeed,currentMix);},[salePrice,selectedSeed,currentMix]);const getProfitMargin=useCallback(()=>{return calculateProfitMargin(salePrice,selectedSeed,currentMix);},[salePrice,selectedSeed,currentMix]);const getTotalBatchProfit=useCallback(()=>{return calculateTotalBatchProfit(salePrice,selectedSeed,currentMix,priceMultiplier);},[salePrice,selectedSeed,currentMix,priceMultiplier]);const getPackagingProfit=useCallback(()=>{return calculatePackagingProfit(salePrice,selectedSeed,currentMix,packagingType);},[salePrice,selectedSeed,currentMix,packagingType]);const getTotalUnits=useCallback(()=>{return calculateTotalUnits(selectedSeed);},[selectedSeed]);// Price/margin calculation handlers\nconst handleCalculateSalePriceFromMargin=()=>{if(targetMargin&&getTotalCost()>0){const calculatedPrice=calculateSalePriceFromMargin(targetMargin,selectedSeed,currentMix);setSalePrice(calculatedPrice);}};const handleCalculateMarginFromSalePrice=()=>{if(salePrice>0&&getTotalCost()>0){const margin=(salePrice-getTotalCost())/salePrice*100;setTargetMargin(isNaN(margin)?'':margin.toFixed(2));}};// Save mix function\nconst saveMix=name=>{if(!name.trim())return;const newMix={id:Date.now(),name:name.trim(),seed:selectedSeed,drugType:selectedDrugType,totalUnits:getTotalUnits(),ingredients:[...currentMix],effects:[...currentEffects],mixingSequence:[...currentMix].map(ing=>ing.name),// Store the exact sequence\nsalePrice:Math.round(parseFloat(salePrice)),totalCost:getTotalCost(),profit:getProfit(),profitMargin:getProfitMargin(),priceMultiplier:priceMultiplier,packagingType:packagingType,favorite:false,dateCreated:new Date().toISOString()};setMixes(prev=>[...prev,newMix]);resetMix();setSelectedSeed(null);setSalePrice(0);};// Mix management functions\nconst removeMix=id=>{setMixes(prev=>prev.filter(mix=>mix.id!==id));};// Toggle favorite status\nconst toggleFavorite=id=>{setMixes(prev=>prev.map(mix=>mix.id===id?{...mix,favorite:!mix.favorite}:mix));};// Production planning functions\nconst addToProduction=strainId=>{const strain=mixes.find(mix=>mix.id===strainId);if(!strain)return;// Default to production based on drug type yield\nconst defaultQuantity=calculateTotalUnits(strain.seed);// Create a production plan with properly calculated ingredient quantities\nconst productionPlan=createEnhancedProductionPlan(strain,defaultQuantity);setProductionPlans(prev=>[...prev,productionPlan]);// Switch to production tab\nsetActiveTab('production');};// Calculate packaging needs for a given quantity\nconst calculatePackagingNeeds=(quantity,type)=>{if(type==='baggies'){return{type:'baggies',quantity:quantity,cost:quantity};}else{const jarsNeeded=Math.ceil(quantity/5);return{type:'jars',quantity:jarsNeeded,cost:jarsNeeded*3};}};// Enhanced production plan creation with proper ingredient calculations\nconst createEnhancedProductionPlan=(strain,quantity)=>{// First, count how many times each ingredient appears in the mix sequence\nconst ingredientCounts={};if(strain.mixingSequence){// Count ingredient usage from the mixing sequence\nstrain.mixingSequence.forEach(ingredientName=>{ingredientCounts[ingredientName]=(ingredientCounts[ingredientName]||0)+1;});}else if(strain.ingredients){// Fallback to ingredients array if mixingSequence not available\nstrain.ingredients.forEach(ingredient=>{const name=ingredient.name;const qty=ingredient.quantity||1;ingredientCounts[name]=(ingredientCounts[name]||0)+qty;});}// Now calculate the proper ingredient needs\nconst enhancedIngredientNeeds=[];// Add the seed/base precursor first\nconst seedsNeeded=Math.ceil(quantity/calculateTotalUnits(strain.seed));const seedIngredient={name:strain.seed.name,quantity:seedsNeeded,totalCost:strain.seed.cost*seedsNeeded};enhancedIngredientNeeds.push(seedIngredient);// Add drug-specific base ingredients\nif(strain.drugType==='meth'){// Add required meth production ingredients\nenhancedIngredientNeeds.push({name:\"Acid\",quantity:seedsNeeded,// One per batch\ntotalCost:40*seedsNeeded});enhancedIngredientNeeds.push({name:\"Red Phosphorus\",quantity:seedsNeeded,// One per batch\ntotalCost:40*seedsNeeded});}else if(strain.drugType==='cocaine'){// Add required cocaine production ingredients\nenhancedIngredientNeeds.push({name:\"Coca Leaves\",quantity:20*seedsNeeded,// 20 leaves per batch\ntotalCost:strain.seed.cost/10*20*seedsNeeded// Estimate cost based on seed\n});// Gasoline is already in common ingredients, but ensure it's added for cocaine\nif(!ingredientCounts['Gasoline']){enhancedIngredientNeeds.push({name:\"Gasoline\",quantity:seedsNeeded,// One per batch\ntotalCost:30*seedsNeeded});}}// Add all other ingredients with proper quantities\nObject.entries(ingredientCounts).forEach(_ref=>{let[name,count]=_ref;// Find the ingredient in the strain's ingredients\nconst ingredient=strain.ingredients.find(ing=>ing.name===name);if(ingredient){enhancedIngredientNeeds.push({name:name,quantity:count*quantity,// Multiply by the production quantity\ntotalCost:ingredient.cost*count*quantity});}});// Add packaging needs\nconst packagingNeeded=calculatePackagingNeeds(quantity,strain.packagingType||'baggies');// Calculate total production cost\nconst productionCost=enhancedIngredientNeeds.reduce((sum,ing)=>sum+ing.totalCost,0)+packagingNeeded.cost;// Expected revenue and profit\nconst expectedRevenue=strain.salePrice*quantity;const expectedProfit=expectedRevenue-productionCost;// Create the production plan object\nreturn{id:Date.now(),strainId:strain.id,strainName:strain.name,drugType:strain.drugType||'weed',plannedQuantity:quantity,status:'planned',dateCreated:new Date().toISOString(),dateSold:null,totalIngredientNeeds:enhancedIngredientNeeds,packagingNeeded:packagingNeeded,productionCost:productionCost,salePrice:strain.salePrice,expectedRevenue:expectedRevenue,expectedProfit:expectedProfit,effects:strain.effects,// Make sure effects are passed through\nproductionStage:'plan'// Start at planning stage\n};};// Function to update a production plan\nconst updateProductionPlan=(planId,updates)=>{setProductionPlans(prev=>prev.map(plan=>{if(plan.id!==planId)return plan;// If quantity changed, recalculate everything\nif(updates.plannedQuantity&&updates.plannedQuantity!==plan.plannedQuantity){const strain=mixes.find(mix=>mix.id===plan.strainId);if(strain){// Use our enhanced function for recalculation\nconst updatedPlan=createEnhancedProductionPlan(strain,updates.plannedQuantity);// Preserve the original ID and any stage-specific data\nreturn{...updatedPlan,id:plan.id,dateCreated:plan.dateCreated,productionStage:updates.productionStage||plan.productionStage,purchasedIngredients:updates.purchasedIngredients||plan.purchasedIngredients,cookingSteps:updates.cookingSteps||plan.cookingSteps,sellingData:updates.sellingData||plan.sellingData};}}// If price changed, recalculate revenue and profit\nif(updates.salePrice&&updates.salePrice!==plan.salePrice){const newExpectedRevenue=plan.plannedQuantity*updates.salePrice;return{...plan,...updates,expectedRevenue:newExpectedRevenue,expectedProfit:newExpectedRevenue-plan.productionCost};}// For all other updates\nreturn{...plan,...updates};}));};const markAsSold=planId=>{const plan=productionPlans.find(p=>p.id===planId);if(!plan||plan.status==='sold')return;// Create a sale record\nconst saleRecord={id:Date.now(),productionId:plan.id,strainId:plan.strainId,strainName:plan.strainName,drugType:plan.drugType,quantitySold:plan.plannedQuantity,totalRevenue:plan.expectedRevenue,totalCost:plan.productionCost,profit:plan.expectedProfit,dateSold:new Date().toISOString()};// Update production plan status\nupdateProductionPlan(planId,{status:'sold',dateSold:saleRecord.dateSold});// Add to sales history\nsetSalesHistory(prev=>[...prev,saleRecord]);};const removeProductionPlan=planId=>{setProductionPlans(prev=>prev.filter(plan=>plan.id!==planId));};const reproduceProductionPlan=(originalPlan,newQuantity,quality)=>{// Get the original strain information\nconst strain=mixes.find(mix=>mix.id===originalPlan.strainId);if(!strain){console.error(\"Unable to find strain for reproduction\");return;}// Calculate a new production plan with the updated quantity\nconst newPlan=calculateProductionPlan(strain,newQuantity,quality);// Add the new plan to production plans\nsetProductionPlans(prev=>[...prev,newPlan]);// Switch to the production tab\nsetActiveTab('production');};// Sorting and filtering\nconst handleSort=column=>{if(sortColumn===column){setSortDirection(prev=>prev==='asc'?'desc':'asc');}else{setSortColumn(column);setSortDirection('asc');}};// Tab switching\nconst handleTabChange=tab=>{setActiveTab(tab);StorageService.saveActiveTab(tab);};// Filter and sort mixes\nconst filteredAndSortedMixes=useMemo(()=>{// First filter by strain view (all or favorites)\nlet filtered=[...mixes];// Then apply additional filters\nfiltered=filtered.filter(mix=>{// Filter by strain name\nif(filterOptions.name&&!mix.name.toLowerCase().includes(filterOptions.name.toLowerCase())){return false;}// Filter by drug type\nif(filterOptions.drugType&&mix.drugType!==filterOptions.drugType){return false;}// Filter by seed type\nif(filterOptions.seedType&&!mix.seed.name.toLowerCase().includes(filterOptions.seedType.toLowerCase())){return false;}// Filter by effect\nif(filterOptions.effect){const hasEffect=mix.effects.some(effect=>effect.toLowerCase().includes(filterOptions.effect.toLowerCase()));if(!hasEffect)return false;}return true;});// Sort items\nreturn filtered.sort((a,b)=>{if(!sortColumn)return 0;let aValue=sortColumn==='seed'?a.seed.name:a[sortColumn];let bValue=sortColumn==='seed'?b.seed.name:b[sortColumn];if(typeof aValue==='string'){aValue=aValue.toLowerCase();bValue=bValue.toLowerCase();}if(aValue<bValue)return sortDirection==='asc'?-1:1;if(aValue>bValue)return sortDirection==='asc'?1:-1;return 0;});},[mixes,filterOptions,sortColumn,sortDirection]);// Manual save function for the AutoSave component\nconst handleManualSave=useCallback(()=>{// Save all current state to storage\nStorageService.saveSelectedDrugType(selectedDrugType);StorageService.saveCurrentMix(currentMix);StorageService.saveSelectedSeed(selectedSeed);StorageService.saveMixes(mixes);StorageService.saveProductionPlans(productionPlans);StorageService.saveSalesHistory(salesHistory);StorageService.saveActiveTab(activeTab);StorageService.saveFilterOptions(filterOptions);StorageService.saveSortSettings({column:sortColumn,direction:sortDirection});StorageService.savePriceSettings({salePrice,targetMargin,priceMultiplier,packagingType});StorageService.saveSupplies(supplies);StorageService.saveSupplyHistory(supplyHistory);StorageService.saveDealers(dealers);StorageService.saveCrewMembers(crewMembers);StorageService.saveDealerTransactions(dealerTransactions);StorageService.saveDailySales(dailySales);},[selectedDrugType,currentMix,selectedSeed,mixes,productionPlans,salesHistory,activeTab,filterOptions,sortColumn,sortDirection,salePrice,targetMargin,priceMultiplier,packagingType,supplies,supplyHistory,dealers,crewMembers,dealerTransactions,dailySales]);// Create a game state object to pass to AutoSave\nconst gameState=useMemo(()=>({mixes,productionPlans,salesHistory,activeTab,filterOptions,sortSettings:{column:sortColumn,direction:sortDirection},priceSettings:{salePrice,targetMargin,priceMultiplier,packagingType},currentMix,selectedSeed,selectedDrugType,supplies,supplyHistory,dealers,crewMembers,dealerTransactions,dailySales}),[mixes,productionPlans,salesHistory,activeTab,filterOptions,sortColumn,sortDirection,salePrice,targetMargin,priceMultiplier,packagingType,currentMix,selectedSeed,selectedDrugType,supplies,supplyHistory,dealers,crewMembers,dealerTransactions,dailySales]);// Save data to storage when it changes\nuseEffect(()=>{StorageService.saveMixes(mixes);},[mixes]);useEffect(()=>{StorageService.saveProductionPlans(productionPlans);},[productionPlans]);useEffect(()=>{StorageService.saveSalesHistory(salesHistory);},[salesHistory]);useEffect(()=>{StorageService.saveActiveTab(activeTab);},[activeTab]);useEffect(()=>{StorageService.saveFilterOptions(filterOptions);},[filterOptions]);useEffect(()=>{StorageService.saveSortSettings({column:sortColumn,direction:sortDirection});},[sortColumn,sortDirection]);useEffect(()=>{StorageService.savePriceSettings({salePrice,targetMargin,priceMultiplier,packagingType});},[salePrice,targetMargin,priceMultiplier,packagingType]);useEffect(()=>{StorageService.saveCurrentMix(currentMix);},[currentMix]);useEffect(()=>{StorageService.saveSupplies(supplies);},[supplies]);useEffect(()=>{StorageService.saveSupplyHistory(supplyHistory);},[supplyHistory]);useEffect(()=>{StorageService.saveDealers(dealers);},[dealers]);useEffect(()=>{StorageService.saveCrewMembers(crewMembers);},[crewMembers]);useEffect(()=>{StorageService.saveDealerTransactions(dealerTransactions);},[dealerTransactions]);useEffect(()=>{StorageService.saveDailySales(dailySales);},[dailySales]);// Render the component\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gradient-to-br from-gray-100 to-gray-50 min-h-screen flex justify-center items-start py-8\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"w-full max-w-5xl mx-auto p-4\",children:[/*#__PURE__*/_jsx(DopeyHeader,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex border-b border-gray-200 mb-6 overflow-x-auto\",children:[/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='creator'?'text-blue-600 border-b-2 border-blue-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>handleTabChange('creator'),children:[/*#__PURE__*/_jsx(FlaskConical,{className:\"inline-block mr-1 w-4 h-4\"}),\"Creator\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='effects'?'text-purple-600 border-b-2 border-purple-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>handleTabChange('effects'),children:[/*#__PURE__*/_jsx(Beaker,{className:\"inline-block mr-1 w-4 h-4\"}),\"Effect Builder\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='saved'?'text-green-600 border-b-2 border-green-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>{handleTabChange('saved');},children:[/*#__PURE__*/_jsx(Heart,{className:\"inline-block mr-1 w-4 h-4\"}),\"My Strains\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='production'?'text-indigo-600 border-b-2 border-indigo-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>handleTabChange('production'),children:[/*#__PURE__*/_jsx(Factory,{className:\"inline-block mr-1 w-4 h-4\"}),\"Production\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='crew'?'text-teal-600 border-b-2 border-teal-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>handleTabChange('crew'),children:[/*#__PURE__*/_jsx(Users,{className:\"inline-block mr-1 w-4 h-4\"}),\"Crew\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='sales'?'text-orange-600 border-b-2 border-orange-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>handleTabChange('sales'),children:[/*#__PURE__*/_jsx(BarChart2,{className:\"inline-block mr-1 w-4 h-4\"}),\"Sales\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`py-2 px-4 font-medium text-sm ${activeTab==='supply'?'text-purple-600 border-b-2 border-purple-600':'text-gray-500 hover:text-gray-700'}`,onClick:()=>handleTabChange('supply'),children:[/*#__PURE__*/_jsx(Package,{className:\"inline-block mr-1 w-4 h-4\"}),\"Supplies\"]})]}),activeTab==='creator'?/*#__PURE__*/_jsxs(\"div\",{className:\"strain-card\",children:[/*#__PURE__*/_jsx(DrugTypeSelector,{selectedDrugType:selectedDrugType,onSelectDrugType:setSelectedDrugType}),/*#__PURE__*/_jsx(SeedSelector,{seedTypes:seedTypes,selectedSeed:selectedSeed,onSelectSeed:setSelectedSeed,selectedDrugType:selectedDrugType}),/*#__PURE__*/_jsx(SequentialIngredientsSelector,{ingredients:ingredients,currentMix:currentMix,currentEffects:currentEffects,mixingHistory:mixingHistory,effectColors:effectColors,additiveEffects:additiveEffects,addIngredient:addIngredient,removeLastIngredient:removeLastIngredient,resetMix:resetMix,finalizeMix:finalizeMix,selectedDrugType:selectedDrugType}),/*#__PURE__*/_jsx(CurrentMixDisplay,{selectedSeed:selectedSeed,currentMix:currentMix,currentEffects:currentEffects,effectColors:effectColors,additiveEffects:additiveEffects,calculateTotalCost:getTotalCost,drugTypes:drugTypes}),/*#__PURE__*/_jsx(PackagingSelector,{packagingType:packagingType,setPackagingType:setPackagingType}),/*#__PURE__*/_jsx(PriceMarginInputs,{salePrice:salePrice,targetMargin:targetMargin,priceMultiplier:priceMultiplier,setPriceMultiplier:setPriceMultiplier,setSalePrice:setSalePrice,setTargetMargin:setTargetMargin,calculateMarginFromSalePrice:handleCalculateMarginFromSalePrice,calculateSalePriceFromMargin:handleCalculateSalePriceFromMargin,currentEffects:currentEffects,productType:selectedDrugType}),selectedSeed&&salePrice>0&&/*#__PURE__*/_jsx(ProfitInfoDisplay,{calculateProfit:getProfit,calculateProfitMargin:getProfitMargin,calculateTotalBuddyProfit:getTotalBatchProfit,calculatePackagingProfit:getPackagingProfit,priceMultiplier:priceMultiplier,packagingType:packagingType}),/*#__PURE__*/_jsxs(\"button\",{className:\"btn-primary\",onClick:finalizeMix,disabled:!selectedSeed||currentMix.length===0||salePrice<=0,children:[/*#__PURE__*/_jsx(CheckCircle,{className:\"mr-2 w-5 h-5\"}),\"Save Creation\"]})]}):activeTab==='effects'?/*#__PURE__*/_jsx(EffectBuilderTab,{seedTypes:seedTypes,ingredients:ingredients,effectColors:effectColors,drugTypes:drugTypes,calculateStrainEffects:calculateStrainEffects}):activeTab==='saved'?/*#__PURE__*/_jsx(CombinedStrainsTab,{mixes:filteredAndSortedMixes,filterOptions:filterOptions,setFilterOptions:setFilterOptions,handleSort:handleSort,sortColumn:sortColumn,sortDirection:sortDirection,removeMix:removeMix,addToProduction:addToProduction,toggleFavorite:toggleFavorite,effectColors:effectColors,drugTypes:drugTypes}):activeTab==='production'?/*#__PURE__*/_jsx(ProductionPlanningTab,{strains:mixes,productionPlans:productionPlans,updateProductionPlan:updateProductionPlan,markAsSold:markAsSold,removeProductionPlan:removeProductionPlan,reproduceProductionPlan:reproduceProductionPlan,drugTypes:drugTypes,dealers:dealers,dailySales:dailySales,setDailySales:setDailySales,dealerTransactions:dealerTransactions,setDealerTransactions:setDealerTransactions}):activeTab==='supply'?/*#__PURE__*/_jsx(SupplyManagementTab,{supplies:supplies,setSupplies:setSupplies,supplyHistory:supplyHistory,setSupplyHistory:setSupplyHistory,productionPlans:productionPlans,drugTypes:drugTypes,seedTypes:seedTypes,ingredients:ingredients}):activeTab==='sales'?/*#__PURE__*/_jsx(SalesHistoryTab,{salesHistory:salesHistory,reproduceProductionPlan:reproduceProductionPlan,drugTypes:drugTypes}):activeTab==='crew'?/*#__PURE__*/_jsx(CrewManagementTab,{dealers:dealers,setDealers:setDealers,crewMembers:crewMembers,setCrewMembers:setCrewMembers,dealerTransactions:dealerTransactions,setDealerTransactions:setDealerTransactions,dailySales:dailySales,setDailySales:setDailySales,drugTypes:drugTypes}):null,/*#__PURE__*/_jsx(NamePromptModal,{isOpen:showNamePrompt,onClose:()=>setShowNamePrompt(false),onSave:saveMix,initialName:''})]}),/*#__PURE__*/_jsx(AutoSave,{gameState:gameState,onManualSave:handleManualSave})]});};export default StrainCreator;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","CheckCircle","FlaskConical","Factory","Heart","Users","Package","Beaker","BarChart2","StorageService","AutoSave","DopeyHeader","CombinedStrainsTab","EffectBuilderTab","ProductionPlanningTab","SeedSelector","CurrentMixDisplay","SequentialIngredientsSelector","PackagingSelector","PriceMarginInputs","ProfitInfoDisplay","DrugTypeSelector","NamePromptModal","SalesHistoryTab","CrewManagementTab","SupplyManagementTab","seedTypes","ingredients","additiveEffects","effectColors","drugTypes","calculateStrainEffects","calculateRecommendedPrice","calculateTotalUnits","calculateTotalCost","calculateProfit","calculateProfitMargin","calculateTotalBatchProfit","calculatePackagingProfit","calculateSalePriceFromMargin","calculateProductionPlan","jsx","_jsx","jsxs","_jsxs","StrainCreator","selectedSeed","setSelectedSeed","loadSelectedSeed","selectedDrugType","setSelectedDrugType","loadSelectedDrugType","currentMix","setCurrentMix","loadCurrentMix","currentEffects","setCurrentEffects","mixingHistory","setMixingHistory","mixes","setMixes","loadMixes","priceSettings","loadPriceSettings","salePrice","targetMargin","priceMultiplier","packagingType","setSalePrice","setTargetMargin","setPriceMultiplier","setPackagingType","activeTab","setActiveTab","loadActiveTab","showNamePrompt","setShowNamePrompt","supplies","setSupplies","loadSupplies","seeds","packaging","baggies","jars","supplyHistory","setSupplyHistory","loadSupplyHistory","sortSettings","loadSortSettings","column","direction","sortColumn","setSortColumn","sortDirection","setSortDirection","filterOptions","setFilterOptions","loadFilterOptions","name","seedType","drugType","effect","productionPlans","setProductionPlans","loadProductionPlans","salesHistory","setSalesHistory","loadSalesHistory","dealers","setDealers","loadDealers","crewMembers","setCrewMembers","loadCrewMembers","botanist","cleaner","handler","chemist","dealerTransactions","setDealerTransactions","loadDealerTransactions","dailySales","setDailySales","loadDailySales","saveSelectedDrugType","seedEffect","step","ingredient","effectsBefore","effectsAfter","changes","saveSelectedSeed","recommendedPrice","addIngredient","updatedMix","result","finalEffects","saveCurrentMix","removeLastIngredient","length","slice","resetMix","finalizeMix","getTotalCost","getProfit","getProfitMargin","getTotalBatchProfit","getPackagingProfit","getTotalUnits","handleCalculateSalePriceFromMargin","calculatedPrice","handleCalculateMarginFromSalePrice","margin","isNaN","toFixed","saveMix","trim","newMix","id","Date","now","seed","totalUnits","effects","mixingSequence","map","ing","Math","round","parseFloat","totalCost","profit","profitMargin","favorite","dateCreated","toISOString","prev","removeMix","filter","mix","toggleFavorite","addToProduction","strainId","strain","find","defaultQuantity","productionPlan","createEnhancedProductionPlan","calculatePackagingNeeds","quantity","type","cost","jarsNeeded","ceil","ingredientCounts","forEach","ingredientName","qty","enhancedIngredientNeeds","seedsNeeded","seedIngredient","push","Object","entries","_ref","count","packagingNeeded","productionCost","reduce","sum","expectedRevenue","expectedProfit","strainName","plannedQuantity","status","dateSold","totalIngredientNeeds","productionStage","updateProductionPlan","planId","updates","plan","updatedPlan","purchasedIngredients","cookingSteps","sellingData","newExpectedRevenue","markAsSold","p","saleRecord","productionId","quantitySold","totalRevenue","removeProductionPlan","reproduceProductionPlan","originalPlan","newQuantity","quality","console","error","newPlan","handleSort","handleTabChange","tab","saveActiveTab","filteredAndSortedMixes","filtered","toLowerCase","includes","hasEffect","some","sort","a","b","aValue","bValue","handleManualSave","saveMixes","saveProductionPlans","saveSalesHistory","saveFilterOptions","saveSortSettings","savePriceSettings","saveSupplies","saveSupplyHistory","saveDealers","saveCrewMembers","saveDealerTransactions","saveDailySales","gameState","className","children","onClick","onSelectDrugType","onSelectSeed","calculateMarginFromSalePrice","productType","calculateTotalBuddyProfit","disabled","strains","isOpen","onClose","onSave","initialName","onManualSave"],"sources":["C:/Users/joshu/OneDrive/Documents/_Technical Projects/Doponomics/dopeonomics/src/StrainCreator.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport {\r\n  CheckCircle,\r\n  FlaskConical,\r\n  Factory,\r\n  Heart,\r\n  Users,\r\n  Package,\r\n  Beaker,\r\n  BarChart2\r\n} from 'lucide-react';\r\n\r\n// Import  components\r\nimport StorageService from './StorageService';\r\nimport AutoSave from './AutoSave';\r\nimport DopeyHeader from './DopeyHeader';\r\nimport CombinedStrainsTab from './CombinedStrainsTab';\r\nimport EffectBuilderTab from './EffectBuilderTab';\r\nimport ProductionPlanningTab from './ProductionPlanningTab';\r\nimport { SeedSelector } from './IngredientComponents';\r\nimport { CurrentMixDisplay } from './MixDisplayComponents';\r\nimport { SequentialIngredientsSelector } from './SequentialIngredientsSelector';\r\nimport { PackagingSelector, PriceMarginInputs} from './PackagingComponents';\r\nimport { ProfitInfoDisplay } from './ProfitComponents';\r\nimport { DrugTypeSelector } from './DrugTypeSelector';\r\nimport { NamePromptModal } from './NamePromptModal';\r\nimport SalesHistoryTab from './SalesHistoryTab';\r\nimport CrewManagementTab from './CrewManagementTab';\r\nimport SupplyManagementTab from './SupplyManagementTab';\r\n\r\n// Import data\r\nimport { \r\n  seedTypes, \r\n  ingredients, \r\n  additiveEffects, \r\n  effectColors,\r\n  drugTypes,\r\n  calculateStrainEffects\r\n} from './straindata';\r\n\r\n// Import pricing functions\r\nimport {\r\n  calculateRecommendedPrice,\r\n  calculateTotalUnits,\r\n  calculateTotalCost,\r\n  calculateProfit,\r\n  calculateProfitMargin,\r\n  calculateTotalBatchProfit,\r\n  calculatePackagingProfit,\r\n  calculateSalePriceFromMargin,\r\n  calculateProductionPlan,\r\n} from './pricing';\r\n\r\nconst StrainCreator = () => {\r\n  // State for strain creation\r\n  const [selectedSeed, setSelectedSeed] = useState(StorageService.loadSelectedSeed());\r\n  const [selectedDrugType, setSelectedDrugType] = useState(StorageService.loadSelectedDrugType());\r\n  const [currentMix, setCurrentMix] = useState(StorageService.loadCurrentMix() || []);\r\n  const [currentEffects, setCurrentEffects] = useState([]);\r\n  const [mixingHistory, setMixingHistory] = useState([]);\r\n  const [mixes, setMixes] = useState(StorageService.loadMixes() || []);\r\n  \r\n  // Pricing and display states\r\n  const priceSettings = StorageService.loadPriceSettings() || {\r\n    salePrice: 0,\r\n    targetMargin: '',\r\n    priceMultiplier: 1,\r\n    packagingType: 'baggies'\r\n  };\r\n  const [salePrice, setSalePrice] = useState(priceSettings.salePrice);\r\n  const [targetMargin, setTargetMargin] = useState(priceSettings.targetMargin);\r\n  const [priceMultiplier, setPriceMultiplier] = useState(priceSettings.priceMultiplier);\r\n  const [packagingType, setPackagingType] = useState(priceSettings.packagingType);\r\n  \r\n  // UI states\r\n  const [activeTab, setActiveTab] = useState(StorageService.loadActiveTab() || 'creator');\r\n  const [showNamePrompt, setShowNamePrompt] = useState(false);\r\n  \r\n  // Supply management states\r\n  const [supplies, setSupplies] = useState(StorageService.loadSupplies() || {\r\n    seeds: {},\r\n    ingredients: {},\r\n    packaging: { baggies: 0, jars: 0 }\r\n  });\r\n  const [supplyHistory, setSupplyHistory] = useState(StorageService.loadSupplyHistory() || []);\r\n  \r\n  // Sort and filter states\r\n  const sortSettings = StorageService.loadSortSettings() || { column: 'name', direction: 'asc' };\r\n  const [sortColumn, setSortColumn] = useState(sortSettings.column);\r\n  const [sortDirection, setSortDirection] = useState(sortSettings.direction);\r\n  const [filterOptions, setFilterOptions] = useState(StorageService.loadFilterOptions() || {\r\n    name: '',\r\n    seedType: '',\r\n    drugType: '',\r\n    effect: ''\r\n  });\r\n  \r\n  // Production and sales states\r\n  const [productionPlans, setProductionPlans] = useState(StorageService.loadProductionPlans() || []);\r\n  const [salesHistory, setSalesHistory] = useState(StorageService.loadSalesHistory() || []);\r\n\r\n  // Crew management states\r\n  const [dealers, setDealers] = useState(StorageService.loadDealers() || []);\r\n  const [crewMembers, setCrewMembers] = useState(StorageService.loadCrewMembers() || {\r\n    botanist: 0,\r\n    cleaner: 0,\r\n    handler: 0,\r\n    chemist: 0\r\n  });\r\n  const [dealerTransactions, setDealerTransactions] = useState(StorageService.loadDealerTransactions() || []);\r\n  const [dailySales, setDailySales] = useState(StorageService.loadDailySales() || []);\r\n\r\n  // Reset everything when drug type changes\r\n  useEffect(() => {\r\n    setSelectedSeed(null);\r\n    setCurrentMix([]);\r\n    setCurrentEffects([]);\r\n    setMixingHistory([]);\r\n    StorageService.saveSelectedDrugType(selectedDrugType);\r\n  }, [selectedDrugType]);\r\n\r\n  // Update effects when seed changes\r\n  useEffect(() => {\r\n    if (selectedSeed) {\r\n      // Reset mix when seed changes\r\n      setCurrentMix([]);\r\n      \r\n      const seedEffect = selectedSeed.effect;\r\n      setCurrentEffects([seedEffect]);\r\n      \r\n      // Initialize mixing history with just the seed\r\n      setMixingHistory([{\r\n        step: 0,\r\n        ingredient: \"Base Seed\",\r\n        effectsBefore: [],\r\n        effectsAfter: [seedEffect],\r\n        changes: [`Added ${seedEffect}`]\r\n      }]);\r\n      \r\n      StorageService.saveSelectedSeed(selectedSeed);\r\n      \r\n      // Update recommended price based on the seed's effect\r\n      const recommendedPrice = calculateRecommendedPrice([seedEffect], selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n    } else {\r\n      setCurrentEffects([]);\r\n      setMixingHistory([]);\r\n    }\r\n  }, [selectedSeed, selectedDrugType]);\r\n\r\n  // Sequential ingredient addition method\r\n  const addIngredient = (ingredient) => {\r\n    // Add ingredient to the current mix\r\n    const updatedMix = [...currentMix, ingredient];\r\n    setCurrentMix(updatedMix);\r\n    \r\n    // Recalculate effects using the sequential approach\r\n    if (selectedSeed) {\r\n      const result = calculateStrainEffects(\r\n        selectedSeed.effect, \r\n        updatedMix\r\n      );\r\n      \r\n      setCurrentEffects(result.finalEffects);\r\n      setMixingHistory(result.mixingHistory);\r\n      \r\n      // Update recommended price\r\n      const recommendedPrice = calculateRecommendedPrice(result.finalEffects, selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n      \r\n      // Save to storage\r\n      StorageService.saveCurrentMix(updatedMix);\r\n    }\r\n  };\r\n  \r\n  // Method to remove the last ingredient added\r\n  const removeLastIngredient = () => {\r\n    if (currentMix.length === 0) return;\r\n    \r\n    const updatedMix = currentMix.slice(0, currentMix.length - 1);\r\n    setCurrentMix(updatedMix);\r\n    \r\n    // Recalculate effects using the sequential approach\r\n    if (selectedSeed) {\r\n      const result = calculateStrainEffects(\r\n        selectedSeed.effect, \r\n        updatedMix\r\n      );\r\n      \r\n      setCurrentEffects(result.finalEffects);\r\n      setMixingHistory(result.mixingHistory);\r\n      \r\n      // Update recommended price\r\n      const recommendedPrice = calculateRecommendedPrice(result.finalEffects, selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n      \r\n      // Save to storage\r\n      StorageService.saveCurrentMix(updatedMix);\r\n    }\r\n  };\r\n  \r\n  // Method to reset the mix completely\r\n  const resetMix = () => {\r\n    setCurrentMix([]);\r\n    \r\n    if (selectedSeed) {\r\n      setCurrentEffects([selectedSeed.effect]);\r\n      setMixingHistory([{\r\n        step: 0,\r\n        ingredient: \"Base Seed\",\r\n        effectsBefore: [],\r\n        effectsAfter: [selectedSeed.effect],\r\n        changes: [`Added ${selectedSeed.effect}`]\r\n      }]);\r\n      \r\n      // Update recommended price\r\n      const recommendedPrice = calculateRecommendedPrice([selectedSeed.effect], selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n      \r\n      // Save to storage\r\n      StorageService.saveCurrentMix([]);\r\n    } else {\r\n      setCurrentEffects([]);\r\n      setMixingHistory([]);\r\n    }\r\n  };\r\n  \r\n  // Method to finalize the mix and proceed to pricing/saving\r\n  const finalizeMix = () => {\r\n    if (currentMix.length > 0 && selectedSeed) {\r\n      // Activate the save prompt\r\n      setShowNamePrompt(true);\r\n    }\r\n  };\r\n\r\n  // Local wrapper functions for pricing calculations\r\n  const getTotalCost = useCallback(() => {\r\n    return calculateTotalCost(selectedSeed, currentMix);\r\n  }, [selectedSeed, currentMix]);\r\n  \r\n  const getProfit = useCallback(() => {\r\n    return calculateProfit(salePrice, selectedSeed, currentMix);\r\n  }, [salePrice, selectedSeed, currentMix]);\r\n  \r\n  const getProfitMargin = useCallback(() => {\r\n    return calculateProfitMargin(salePrice, selectedSeed, currentMix);\r\n  }, [salePrice, selectedSeed, currentMix]);\r\n  \r\n  const getTotalBatchProfit = useCallback(() => {\r\n    return calculateTotalBatchProfit(salePrice, selectedSeed, currentMix, priceMultiplier);\r\n  }, [salePrice, selectedSeed, currentMix, priceMultiplier]);\r\n  \r\n  const getPackagingProfit = useCallback(() => {\r\n    return calculatePackagingProfit(salePrice, selectedSeed, currentMix, packagingType);\r\n  }, [salePrice, selectedSeed, currentMix, packagingType]);\r\n  \r\n  const getTotalUnits = useCallback(() => {\r\n    return calculateTotalUnits(selectedSeed);\r\n  }, [selectedSeed]);\r\n\r\n  // Price/margin calculation handlers\r\n  const handleCalculateSalePriceFromMargin = () => {\r\n    if (targetMargin && getTotalCost() > 0) {\r\n      const calculatedPrice = calculateSalePriceFromMargin(targetMargin, selectedSeed, currentMix);\r\n      setSalePrice(calculatedPrice);\r\n    }\r\n  };\r\n\r\n  const handleCalculateMarginFromSalePrice = () => {\r\n    if (salePrice > 0 && getTotalCost() > 0) {\r\n      const margin = ((salePrice - getTotalCost()) / salePrice) * 100;\r\n      setTargetMargin(isNaN(margin) ? '' : margin.toFixed(2));\r\n    }\r\n  };\r\n\r\n  // Save mix function\r\n  const saveMix = (name) => {\r\n    if (!name.trim()) return;\r\n\r\n    const newMix = {\r\n      id: Date.now(),\r\n      name: name.trim(),\r\n      seed: selectedSeed,\r\n      drugType: selectedDrugType,\r\n      totalUnits: getTotalUnits(),\r\n      ingredients: [...currentMix],\r\n      effects: [...currentEffects],\r\n      mixingSequence: [...currentMix].map(ing => ing.name), // Store the exact sequence\r\n      salePrice: Math.round(parseFloat(salePrice)),\r\n      totalCost: getTotalCost(),\r\n      profit: getProfit(),\r\n      profitMargin: getProfitMargin(),\r\n      priceMultiplier: priceMultiplier,\r\n      packagingType: packagingType,\r\n      favorite: false,\r\n      dateCreated: new Date().toISOString()\r\n    };\r\n\r\n    setMixes(prev => [...prev, newMix]);\r\n    resetMix();\r\n    setSelectedSeed(null);\r\n    setSalePrice(0);\r\n  };\r\n\r\n  // Mix management functions\r\n  const removeMix = (id) => {\r\n    setMixes(prev => prev.filter(mix => mix.id !== id));\r\n  };\r\n  \r\n  // Toggle favorite status\r\n  const toggleFavorite = (id) => {\r\n    setMixes(prev => prev.map(mix => \r\n      mix.id === id ? { ...mix, favorite: !mix.favorite } : mix\r\n    ));\r\n  };\r\n  \r\n  // Production planning functions\r\n  const addToProduction = (strainId) => {\r\n    const strain = mixes.find(mix => mix.id === strainId);\r\n    if (!strain) return;\r\n    \r\n    // Default to production based on drug type yield\r\n    const defaultQuantity = calculateTotalUnits(strain.seed);\r\n    \r\n    // Create a production plan with properly calculated ingredient quantities\r\n    const productionPlan = createEnhancedProductionPlan(strain, defaultQuantity);\r\n    \r\n    setProductionPlans(prev => [...prev, productionPlan]);\r\n    // Switch to production tab\r\n    setActiveTab('production');\r\n  };\r\n  \r\n  // Calculate packaging needs for a given quantity\r\n  const calculatePackagingNeeds = (quantity, type) => {\r\n    if (type === 'baggies') {\r\n      return {\r\n        type: 'baggies',\r\n        quantity: quantity,\r\n        cost: quantity\r\n      };\r\n    } else {\r\n      const jarsNeeded = Math.ceil(quantity / 5);\r\n      return {\r\n        type: 'jars',\r\n        quantity: jarsNeeded,\r\n        cost: jarsNeeded * 3\r\n      };\r\n    }\r\n  };\r\n  \r\n  // Enhanced production plan creation with proper ingredient calculations\r\n  const createEnhancedProductionPlan = (strain, quantity) => {\r\n    // First, count how many times each ingredient appears in the mix sequence\r\n    const ingredientCounts = {};\r\n    \r\n    if (strain.mixingSequence) {\r\n      // Count ingredient usage from the mixing sequence\r\n      strain.mixingSequence.forEach(ingredientName => {\r\n        ingredientCounts[ingredientName] = (ingredientCounts[ingredientName] || 0) + 1;\r\n      });\r\n    } else if (strain.ingredients) {\r\n      // Fallback to ingredients array if mixingSequence not available\r\n      strain.ingredients.forEach(ingredient => {\r\n        const name = ingredient.name;\r\n        const qty = ingredient.quantity || 1;\r\n        ingredientCounts[name] = (ingredientCounts[name] || 0) + qty;\r\n      });\r\n    }\r\n    \r\n    // Now calculate the proper ingredient needs\r\n    const enhancedIngredientNeeds = [];\r\n    \r\n    // Add the seed/base precursor first\r\n    const seedsNeeded = Math.ceil(quantity / calculateTotalUnits(strain.seed));\r\n    const seedIngredient = {\r\n      name: strain.seed.name,\r\n      quantity: seedsNeeded,\r\n      totalCost: strain.seed.cost * seedsNeeded\r\n    };\r\n    enhancedIngredientNeeds.push(seedIngredient);\r\n    \r\n    // Add drug-specific base ingredients\r\n    if (strain.drugType === 'meth') {\r\n      // Add required meth production ingredients\r\n      enhancedIngredientNeeds.push({\r\n        name: \"Acid\",\r\n        quantity: seedsNeeded, // One per batch\r\n        totalCost: 40 * seedsNeeded\r\n      });\r\n      \r\n      enhancedIngredientNeeds.push({\r\n        name: \"Red Phosphorus\",\r\n        quantity: seedsNeeded, // One per batch\r\n        totalCost: 40 * seedsNeeded\r\n      });\r\n    } \r\n    else if (strain.drugType === 'cocaine') {\r\n      // Add required cocaine production ingredients\r\n      enhancedIngredientNeeds.push({\r\n        name: \"Coca Leaves\",\r\n        quantity: 20 * seedsNeeded, // 20 leaves per batch\r\n        totalCost: (strain.seed.cost / 10) * 20 * seedsNeeded // Estimate cost based on seed\r\n      });\r\n      \r\n      // Gasoline is already in common ingredients, but ensure it's added for cocaine\r\n      if (!ingredientCounts['Gasoline']) {\r\n        enhancedIngredientNeeds.push({\r\n          name: \"Gasoline\",\r\n          quantity: seedsNeeded, // One per batch\r\n          totalCost: 30 * seedsNeeded\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add all other ingredients with proper quantities\r\n    Object.entries(ingredientCounts).forEach(([name, count]) => {\r\n      // Find the ingredient in the strain's ingredients\r\n      const ingredient = strain.ingredients.find(ing => ing.name === name);\r\n      if (ingredient) {\r\n        enhancedIngredientNeeds.push({\r\n          name: name,\r\n          quantity: count * quantity, // Multiply by the production quantity\r\n          totalCost: ingredient.cost * count * quantity\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Add packaging needs\r\n    const packagingNeeded = calculatePackagingNeeds(quantity, strain.packagingType || 'baggies');\r\n    \r\n    // Calculate total production cost\r\n    const productionCost = enhancedIngredientNeeds.reduce((sum, ing) => sum + ing.totalCost, 0) + packagingNeeded.cost;\r\n    \r\n    // Expected revenue and profit\r\n    const expectedRevenue = strain.salePrice * quantity;\r\n    const expectedProfit = expectedRevenue - productionCost;\r\n    \r\n    // Create the production plan object\r\n    return {\r\n      id: Date.now(),\r\n      strainId: strain.id,\r\n      strainName: strain.name,\r\n      drugType: strain.drugType || 'weed',\r\n      plannedQuantity: quantity,\r\n      status: 'planned',\r\n      dateCreated: new Date().toISOString(),\r\n      dateSold: null,\r\n      totalIngredientNeeds: enhancedIngredientNeeds,\r\n      packagingNeeded: packagingNeeded,\r\n      productionCost: productionCost,\r\n      salePrice: strain.salePrice,\r\n      expectedRevenue: expectedRevenue,\r\n      expectedProfit: expectedProfit,\r\n      effects: strain.effects, // Make sure effects are passed through\r\n      productionStage: 'plan' // Start at planning stage\r\n    };\r\n  };\r\n  \r\n  // Function to update a production plan\r\n  const updateProductionPlan = (planId, updates) => {\r\n    setProductionPlans(prev => prev.map(plan => {\r\n      if (plan.id !== planId) return plan;\r\n      \r\n      // If quantity changed, recalculate everything\r\n      if (updates.plannedQuantity && updates.plannedQuantity !== plan.plannedQuantity) {\r\n        const strain = mixes.find(mix => mix.id === plan.strainId);\r\n        if (strain) {\r\n          // Use our enhanced function for recalculation\r\n          const updatedPlan = createEnhancedProductionPlan(strain, updates.plannedQuantity);\r\n          // Preserve the original ID and any stage-specific data\r\n          return { \r\n            ...updatedPlan, \r\n            id: plan.id, \r\n            dateCreated: plan.dateCreated,\r\n            productionStage: updates.productionStage || plan.productionStage,\r\n            purchasedIngredients: updates.purchasedIngredients || plan.purchasedIngredients,\r\n            cookingSteps: updates.cookingSteps || plan.cookingSteps,\r\n            sellingData: updates.sellingData || plan.sellingData\r\n          };\r\n        }\r\n      }\r\n      \r\n      // If price changed, recalculate revenue and profit\r\n      if (updates.salePrice && updates.salePrice !== plan.salePrice) {\r\n        const newExpectedRevenue = plan.plannedQuantity * updates.salePrice;\r\n        return {\r\n          ...plan,\r\n          ...updates,\r\n          expectedRevenue: newExpectedRevenue,\r\n          expectedProfit: newExpectedRevenue - plan.productionCost\r\n        };\r\n      }\r\n      \r\n      // For all other updates\r\n      return { ...plan, ...updates };\r\n    }));\r\n  };\r\n  \r\n  const markAsSold = (planId) => {\r\n    const plan = productionPlans.find(p => p.id === planId);\r\n    if (!plan || plan.status === 'sold') return;\r\n    \r\n    // Create a sale record\r\n    const saleRecord = {\r\n      id: Date.now(),\r\n      productionId: plan.id,\r\n      strainId: plan.strainId,\r\n      strainName: plan.strainName,\r\n      drugType: plan.drugType,\r\n      quantitySold: plan.plannedQuantity,\r\n      totalRevenue: plan.expectedRevenue,\r\n      totalCost: plan.productionCost,\r\n      profit: plan.expectedProfit,\r\n      dateSold: new Date().toISOString()\r\n    };\r\n    \r\n    // Update production plan status\r\n    updateProductionPlan(planId, { \r\n      status: 'sold',\r\n      dateSold: saleRecord.dateSold\r\n    });\r\n    \r\n    // Add to sales history\r\n    setSalesHistory(prev => [...prev, saleRecord]);\r\n  };\r\n  \r\n  const removeProductionPlan = (planId) => {\r\n    setProductionPlans(prev => prev.filter(plan => plan.id !== planId));\r\n  };\r\n\r\n  const reproduceProductionPlan = (originalPlan, newQuantity, quality) => {\r\n    // Get the original strain information\r\n    const strain = mixes.find(mix => mix.id === originalPlan.strainId);\r\n    \r\n    if (!strain) {\r\n      console.error(\"Unable to find strain for reproduction\");\r\n      return;\r\n    }\r\n    \r\n    // Calculate a new production plan with the updated quantity\r\n    const newPlan = calculateProductionPlan(strain, newQuantity, quality);\r\n    \r\n    // Add the new plan to production plans\r\n    setProductionPlans(prev => [...prev, newPlan]);\r\n    \r\n    // Switch to the production tab\r\n    setActiveTab('production');\r\n  };\r\n\r\n  // Sorting and filtering\r\n  const handleSort = (column) => {\r\n    if (sortColumn === column) {\r\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortColumn(column);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n  \r\n  // Tab switching\r\n  const handleTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n    StorageService.saveActiveTab(tab);\r\n  };\r\n\r\n  // Filter and sort mixes\r\n  const filteredAndSortedMixes = useMemo(() => {\r\n    // First filter by strain view (all or favorites)\r\n    let filtered = [...mixes];\r\n    \r\n    // Then apply additional filters\r\n    filtered = filtered.filter(mix => {\r\n      // Filter by strain name\r\n      if (filterOptions.name && !mix.name.toLowerCase().includes(filterOptions.name.toLowerCase())) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by drug type\r\n      if (filterOptions.drugType && mix.drugType !== filterOptions.drugType) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by seed type\r\n      if (filterOptions.seedType && !mix.seed.name.toLowerCase().includes(filterOptions.seedType.toLowerCase())) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by effect\r\n      if (filterOptions.effect) {\r\n        const hasEffect = mix.effects.some(\r\n          effect => effect.toLowerCase().includes(filterOptions.effect.toLowerCase())\r\n        );\r\n        if (!hasEffect) return false;\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    // Sort items\r\n    return filtered.sort((a, b) => {\r\n      if (!sortColumn) return 0;\r\n\r\n      let aValue = sortColumn === 'seed' ? a.seed.name : a[sortColumn];\r\n      let bValue = sortColumn === 'seed' ? b.seed.name : b[sortColumn];\r\n\r\n      if (typeof aValue === 'string') {\r\n        aValue = aValue.toLowerCase();\r\n        bValue = bValue.toLowerCase();\r\n      }\r\n\r\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n  }, [mixes, filterOptions, sortColumn, sortDirection]);\r\n\r\n  // Manual save function for the AutoSave component\r\n  const handleManualSave = useCallback(() => {\r\n    // Save all current state to storage\r\n    StorageService.saveSelectedDrugType(selectedDrugType);\r\n    StorageService.saveCurrentMix(currentMix);\r\n    StorageService.saveSelectedSeed(selectedSeed);\r\n    StorageService.saveMixes(mixes);\r\n    StorageService.saveProductionPlans(productionPlans);\r\n    StorageService.saveSalesHistory(salesHistory);\r\n    StorageService.saveActiveTab(activeTab);\r\n    StorageService.saveFilterOptions(filterOptions);\r\n    StorageService.saveSortSettings({ column: sortColumn, direction: sortDirection });\r\n    StorageService.savePriceSettings({\r\n      salePrice,\r\n      targetMargin,\r\n      priceMultiplier,\r\n      packagingType\r\n    });\r\n    StorageService.saveSupplies(supplies);\r\n    StorageService.saveSupplyHistory(supplyHistory);\r\n    StorageService.saveDealers(dealers);\r\n    StorageService.saveCrewMembers(crewMembers);\r\n    StorageService.saveDealerTransactions(dealerTransactions);\r\n    StorageService.saveDailySales(dailySales);\r\n  }, [\r\n    selectedDrugType, currentMix, selectedSeed, mixes, productionPlans, \r\n    salesHistory, activeTab, filterOptions, sortColumn, \r\n    sortDirection, salePrice, targetMargin, priceMultiplier, packagingType,\r\n    supplies, supplyHistory, dealers, crewMembers, dealerTransactions, dailySales\r\n  ]);\r\n\r\n  // Create a game state object to pass to AutoSave\r\n  const gameState = useMemo(() => ({\r\n    mixes,\r\n    productionPlans,\r\n    salesHistory,\r\n    activeTab,\r\n    filterOptions,\r\n    sortSettings: { column: sortColumn, direction: sortDirection },\r\n    priceSettings: { salePrice, targetMargin, priceMultiplier, packagingType },\r\n    currentMix,\r\n    selectedSeed,\r\n    selectedDrugType,\r\n    supplies,\r\n    supplyHistory,\r\n    dealers,\r\n    crewMembers,\r\n    dealerTransactions,\r\n    dailySales\r\n  }), [\r\n    mixes, productionPlans, salesHistory, activeTab, \r\n    filterOptions, sortColumn, sortDirection, salePrice, targetMargin, \r\n    priceMultiplier, packagingType, currentMix, selectedSeed, selectedDrugType,\r\n    supplies, supplyHistory, dealers, crewMembers, dealerTransactions, dailySales\r\n  ]);\r\n\r\n  // Save data to storage when it changes\r\n  useEffect(() => {\r\n    StorageService.saveMixes(mixes);\r\n  }, [mixes]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveProductionPlans(productionPlans);\r\n  }, [productionPlans]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSalesHistory(salesHistory);\r\n  }, [salesHistory]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveActiveTab(activeTab);\r\n  }, [activeTab]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveFilterOptions(filterOptions);\r\n  }, [filterOptions]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSortSettings({ column: sortColumn, direction: sortDirection });\r\n  }, [sortColumn, sortDirection]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.savePriceSettings({\r\n      salePrice,\r\n      targetMargin,\r\n      priceMultiplier,\r\n      packagingType\r\n    });\r\n  }, [salePrice, targetMargin, priceMultiplier, packagingType]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveCurrentMix(currentMix);\r\n  }, [currentMix]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSupplies(supplies);\r\n  }, [supplies]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSupplyHistory(supplyHistory);\r\n  }, [supplyHistory]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveDealers(dealers);\r\n  }, [dealers]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveCrewMembers(crewMembers);\r\n  }, [crewMembers]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveDealerTransactions(dealerTransactions);\r\n  }, [dealerTransactions]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveDailySales(dailySales);\r\n  }, [dailySales]);\r\n\r\n// Render the component\r\n      return (\r\n        <div className=\"bg-gradient-to-br from-gray-100 to-gray-50 min-h-screen flex justify-center items-start py-8\">\r\n          <div className=\"w-full max-w-5xl mx-auto p-4\">\r\n            <DopeyHeader />\r\n            \r\n            {/* Main Navigation Tabs */}\r\n            <div className=\"flex border-b border-gray-200 mb-6 overflow-x-auto\">\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'creator'\r\n              ? 'text-blue-600 border-b-2 border-blue-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('creator')}\r\n        >\r\n          <FlaskConical className=\"inline-block mr-1 w-4 h-4\" />\r\n          Creator\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'effects'\r\n              ? 'text-purple-600 border-b-2 border-purple-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('effects')}\r\n        >\r\n          <Beaker className=\"inline-block mr-1 w-4 h-4\" />\r\n          Effect Builder\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'saved'\r\n              ? 'text-green-600 border-b-2 border-green-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => {\r\n            handleTabChange('saved');\r\n          }}\r\n        >\r\n          <Heart className=\"inline-block mr-1 w-4 h-4\" />\r\n          My Strains\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'production'\r\n              ? 'text-indigo-600 border-b-2 border-indigo-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('production')}\r\n        >\r\n          <Factory className=\"inline-block mr-1 w-4 h-4\" />\r\n          Production\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'crew'\r\n              ? 'text-teal-600 border-b-2 border-teal-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('crew')}\r\n        >\r\n          <Users className=\"inline-block mr-1 w-4 h-4\" />\r\n          Crew\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'sales'\r\n              ? 'text-orange-600 border-b-2 border-orange-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('sales')}\r\n        >\r\n          <BarChart2 className=\"inline-block mr-1 w-4 h-4\" />\r\n          Sales\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'supply'\r\n              ? 'text-purple-600 border-b-2 border-purple-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('supply')}\r\n        >\r\n          <Package className=\"inline-block mr-1 w-4 h-4\" />\r\n          Supplies\r\n        </button>\r\n      </div>\r\n\r\n      {/* Content based on active tab */}\r\n      {activeTab === 'creator' ? (\r\n        <div className=\"strain-card\">\r\n          {/* Drug Type Selection */}\r\n          <DrugTypeSelector \r\n            selectedDrugType={selectedDrugType}\r\n            onSelectDrugType={setSelectedDrugType}\r\n          />\r\n\r\n          {/* Seed Type Selection */}\r\n          <SeedSelector \r\n            seedTypes={seedTypes} \r\n            selectedSeed={selectedSeed} \r\n            onSelectSeed={setSelectedSeed}\r\n            selectedDrugType={selectedDrugType}\r\n          />\r\n\r\n          {/* Sequential Ingredients Selector */}\r\n          <SequentialIngredientsSelector\r\n            ingredients={ingredients}\r\n            currentMix={currentMix}\r\n            currentEffects={currentEffects}\r\n            mixingHistory={mixingHistory}\r\n            effectColors={effectColors}\r\n            additiveEffects={additiveEffects}\r\n            addIngredient={addIngredient}\r\n            removeLastIngredient={removeLastIngredient}\r\n            resetMix={resetMix}\r\n            finalizeMix={finalizeMix}\r\n            selectedDrugType={selectedDrugType}\r\n          />\r\n\r\n          {/* Current Mix Display */}\r\n          <CurrentMixDisplay \r\n            selectedSeed={selectedSeed}\r\n            currentMix={currentMix}\r\n            currentEffects={currentEffects}\r\n            effectColors={effectColors}\r\n            additiveEffects={additiveEffects}\r\n            calculateTotalCost={getTotalCost}\r\n            drugTypes={drugTypes}\r\n          />\r\n\r\n          {/* Packaging Type Selection */}\r\n          <PackagingSelector \r\n            packagingType={packagingType}\r\n            setPackagingType={setPackagingType}\r\n          />\r\n\r\n          {/* Price and Margin Inputs */}\r\n          <PriceMarginInputs \r\n            salePrice={salePrice} \r\n            targetMargin={targetMargin}\r\n            priceMultiplier={priceMultiplier}\r\n            setPriceMultiplier={setPriceMultiplier}\r\n            setSalePrice={setSalePrice}\r\n            setTargetMargin={setTargetMargin}\r\n            calculateMarginFromSalePrice={handleCalculateMarginFromSalePrice}\r\n            calculateSalePriceFromMargin={handleCalculateSalePriceFromMargin}\r\n            currentEffects={currentEffects}\r\n            productType={selectedDrugType}\r\n          />\r\n\r\n          {/* Profit Information Display */}\r\n          {selectedSeed && salePrice > 0 && (\r\n            <ProfitInfoDisplay \r\n              calculateProfit={getProfit}\r\n              calculateProfitMargin={getProfitMargin}\r\n              calculateTotalBuddyProfit={getTotalBatchProfit}\r\n              calculatePackagingProfit={getPackagingProfit}\r\n              priceMultiplier={priceMultiplier}\r\n              packagingType={packagingType}\r\n            />\r\n          )}\r\n\r\n          {/* Save Mix Button */}\r\n          <button\r\n            className=\"btn-primary\"\r\n            onClick={finalizeMix}\r\n            disabled={!selectedSeed || currentMix.length === 0 || salePrice <= 0}\r\n          >\r\n            <CheckCircle className=\"mr-2 w-5 h-5\" />\r\n            Save Creation\r\n          </button>\r\n        </div>\r\n\r\n      ) : activeTab === 'effects' ? (\r\n        <EffectBuilderTab\r\n          seedTypes={seedTypes}\r\n          ingredients={ingredients}\r\n          effectColors={effectColors}\r\n          drugTypes={drugTypes}\r\n          calculateStrainEffects={calculateStrainEffects}\r\n        />\r\n      ) : activeTab === 'saved' ? (\r\n        <CombinedStrainsTab\r\n          mixes={filteredAndSortedMixes}\r\n          filterOptions={filterOptions}\r\n          setFilterOptions={setFilterOptions}\r\n          handleSort={handleSort}\r\n          sortColumn={sortColumn}\r\n          sortDirection={sortDirection}\r\n          removeMix={removeMix}\r\n          addToProduction={addToProduction}\r\n          toggleFavorite={toggleFavorite}\r\n          effectColors={effectColors}\r\n          drugTypes={drugTypes}\r\n        />\r\n      ) : activeTab === 'production' ? (\r\n        <ProductionPlanningTab\r\n          strains={mixes}\r\n          productionPlans={productionPlans}\r\n          updateProductionPlan={updateProductionPlan}\r\n          markAsSold={markAsSold}\r\n          removeProductionPlan={removeProductionPlan}\r\n          reproduceProductionPlan={reproduceProductionPlan}\r\n          drugTypes={drugTypes}\r\n          dealers={dealers}\r\n          dailySales={dailySales}\r\n          setDailySales={setDailySales}\r\n          dealerTransactions={dealerTransactions}\r\n          setDealerTransactions={setDealerTransactions}\r\n        />\r\n      ) : activeTab === 'supply' ? (\r\n        <SupplyManagementTab\r\n          supplies={supplies}\r\n          setSupplies={setSupplies}\r\n          supplyHistory={supplyHistory}\r\n          setSupplyHistory={setSupplyHistory}\r\n          productionPlans={productionPlans}\r\n          drugTypes={drugTypes}\r\n          seedTypes={seedTypes}\r\n          ingredients={ingredients}\r\n        />\r\n      ) : activeTab === 'sales' ? (\r\n        <SalesHistoryTab\r\n          salesHistory={salesHistory}\r\n          reproduceProductionPlan={reproduceProductionPlan}\r\n          drugTypes={drugTypes}\r\n        />\r\n      ) : activeTab === 'crew' ? (\r\n        <CrewManagementTab\r\n          dealers={dealers}\r\n          setDealers={setDealers}\r\n          crewMembers={crewMembers}\r\n          setCrewMembers={setCrewMembers}\r\n          dealerTransactions={dealerTransactions}\r\n          setDealerTransactions={setDealerTransactions}\r\n          dailySales={dailySales}\r\n          setDailySales={setDailySales}\r\n          drugTypes={drugTypes}\r\n        />\r\n      ) : null}\r\n\r\n      {/* Name Prompt Modal */}\r\n      <NamePromptModal\r\n        isOpen={showNamePrompt}\r\n        onClose={() => setShowNamePrompt(false)}\r\n        onSave={saveMix}\r\n        initialName={''}\r\n      />\r\n    </div>\r\n\r\n    {/* AutoSave component */}\r\n    <AutoSave \r\n      gameState={gameState}\r\n      onManualSave={handleManualSave}\r\n    />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default StrainCreator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}