{"ast":null,"code":"// pricing.js - Centralized pricing functions for the application\n\n// Calculate effect multiplier for price calculations\nexport const calculateEffectMultiplier = currentEffects => {\n  // Add a safety check to ensure currentEffects is an array\n  if (!currentEffects || !Array.isArray(currentEffects) || currentEffects.length === 0) {\n    return 0;\n  }\n\n  // Multiplier values for each effect\n  const effectMultipliers = {\n    'Anti-Gravity': 0.54,\n    'Athletic': 0.32,\n    'Balding': 0.30,\n    'Bright-Eyed': 0.40,\n    'Calming': 0.10,\n    'Calorie-Dense': 0.28,\n    'Cyclopean': 0.56,\n    'Disorienting': 0.00,\n    'Electrifying': 0.50,\n    'Energizing': 0.22,\n    'Euphoric': 0.18,\n    'Explosive': 0.00,\n    'Focused': 0.16,\n    'Foggy': 0.36,\n    'Gingeritis': 0.20,\n    'Glowing': 0.48,\n    'Jennerising': 0.42,\n    'Laxative': 0.00,\n    'Long-Faced': 0.52,\n    'Munchies': 0.12,\n    'Paranoia': 0.00,\n    'Refreshing': 0.14,\n    'Schizophrenia': 0.00,\n    'Sedating': 0.26,\n    'Seizure-Inducing': 0.00,\n    'Shrinking': 0.60,\n    'Slippery': 0.34,\n    'Smelly': 0.00,\n    'Sneaky': 0.24,\n    'Spicy': 0.38,\n    'Thought-Provoking': 0.44,\n    'Toxic': 0.00,\n    'Tropic Thunder': 0.46,\n    'Zombifying': 0.58\n  };\n\n  // Sum up the multipliers for all effects\n  return currentEffects.reduce((total, effect) => {\n    return total + (effectMultipliers[effect] || 0);\n  }, 0);\n};\n\n// Calculate recommended price based on drug type and effects\nexport const calculateRecommendedPrice = (effects, productType = 'Weed') => {\n  // Add safety check for effects\n  if (!effects || !Array.isArray(effects)) {\n    effects = [];\n  }\n\n  // Get base price based on drug type\n  const basePrice = productType === 'Weed' ? 35 : productType === 'Meth' ? 70 : productType === 'Cocaine' ? 90 : 35;\n  const effectMultiplier = calculateEffectMultiplier(effects);\n  return Math.round(basePrice * (1 + effectMultiplier));\n};\n\n// Calculate total yield units based on drug type\nexport const calculateTotalUnits = selectedSeed => {\n  if (!selectedSeed) return 0;\n  if (selectedSeed.drugType === 'weed') {\n    return 12; // Weed yields 12 buds per seed\n  } else if (selectedSeed.drugType === 'meth') {\n    return 10; // Meth yields 10 crystals per batch\n  } else if (selectedSeed.drugType === 'cocaine') {\n    return 10; // Cocaine yields 10 grams per batch\n  }\n  return 12; // Default fallback\n};\n\n// Calculate total ingredient cost\nexport const calculateIngredientCost = currentMix => {\n  if (!currentMix || !Array.isArray(currentMix)) {\n    return 0;\n  }\n  return currentMix.reduce((total, ingredient) => {\n    const quantity = ingredient.quantity || 1;\n    return total + ingredient.cost * quantity;\n  }, 0);\n};\n\n// Calculate total cost including seed cost per unit\nexport const calculateTotalCost = (selectedSeed, currentMix) => {\n  if (!selectedSeed) return 0;\n  if (!currentMix || !Array.isArray(currentMix)) {\n    currentMix = [];\n  }\n  const ingredientsCost = calculateIngredientCost(currentMix);\n\n  // Calculate seed cost per unit based on drug type\n  let seedCostPerUnit;\n  const totalUnits = calculateTotalUnits(selectedSeed);\n  seedCostPerUnit = selectedSeed.cost / totalUnits;\n  return seedCostPerUnit + ingredientsCost;\n};\n\n// Calculate profit per unit\nexport const calculateProfit = (salePrice, selectedSeed, currentMix) => {\n  return salePrice - calculateTotalCost(selectedSeed, currentMix);\n};\n\n// Calculate profit margin percentage\nexport const calculateProfitMargin = (salePrice, selectedSeed, currentMix) => {\n  const cost = calculateTotalCost(selectedSeed, currentMix);\n  if (cost === 0 || salePrice === 0) return 0;\n  return ((salePrice - cost) / salePrice * 100).toFixed(1);\n};\n\n// Calculate total profit for entire batch with multiplier\nexport const calculateTotalBatchProfit = (salePrice, selectedSeed, currentMix, priceMultiplier) => {\n  const profitPerUnit = calculateProfit(salePrice, selectedSeed, currentMix);\n  const totalUnits = calculateTotalUnits(selectedSeed);\n  return profitPerUnit * totalUnits * priceMultiplier;\n};\n\n// Calculate packaging costs and profit based on drug type\nexport const calculatePackagingProfit = (salePrice, selectedSeed, currentMix, packagingType) => {\n  const profitPerUnit = calculateProfit(salePrice, selectedSeed, currentMix);\n  const totalUnits = calculateTotalUnits(selectedSeed);\n  if (packagingType === 'baggies') {\n    // $1 per baggie, one unit per baggie\n    const packagingCost = 1 * totalUnits;\n    return profitPerUnit * totalUnits - packagingCost;\n  } else {\n    // Jars: $3 per jar, 5 units per jar, with the last jar potentially not full\n    const jarsNeeded = Math.ceil(totalUnits / 5);\n    const packagingCost = 3 * jarsNeeded;\n    return profitPerUnit * totalUnits - packagingCost;\n  }\n};\n\n// Calculate the sale price from a target margin\nexport const calculateSalePriceFromMargin = (targetMargin, selectedSeed, currentMix) => {\n  if (!targetMargin || !selectedSeed) return 0;\n  const cost = calculateTotalCost(selectedSeed, currentMix);\n  if (cost === 0) return 0;\n  const margin = parseFloat(targetMargin) / 100;\n  const calculatedPrice = cost / (1 - margin);\n  return Math.round(calculatedPrice);\n};\n\n// Calculate packaging needs for a given quantity\nexport const calculatePackagingNeeds = (quantity, type) => {\n  if (type === 'baggies') {\n    return {\n      type: 'baggies',\n      quantity: quantity,\n      cost: quantity\n    };\n  } else {\n    const jarsNeeded = Math.ceil(quantity / 5);\n    return {\n      type: 'jars',\n      quantity: jarsNeeded,\n      cost: jarsNeeded * 3\n    };\n  }\n};\n\n// Calculate production plan data for a strain\nexport const calculateProductionPlan = (strain, quantity) => {\n  // Safety checks\n  if (!strain || !strain.seed) return null;\n\n  // Ensure quantity is a valid number\n  quantity = parseInt(quantity) || calculateTotalUnits(strain.seed);\n  const seedsOrBatchesNeeded = Math.ceil(quantity / calculateTotalUnits(strain.seed));\n  const seedCost = seedsOrBatchesNeeded * strain.seed.cost;\n  const ingredientsNeeded = (strain.ingredients || []).map(ingredient => {\n    const quantity = ingredient.quantity || 1;\n    return {\n      name: ingredient.name,\n      quantity: quantity,\n      totalCost: ingredient.cost * quantity\n    };\n  });\n  const seedIngredient = {\n    name: strain.seed.name,\n    quantity: seedsOrBatchesNeeded,\n    totalCost: seedCost\n  };\n  const packagingNeeded = calculatePackagingNeeds(quantity, strain.packagingType || 'baggies');\n  const productionCost = seedCost + (strain.ingredients || []).reduce((sum, ing) => {\n    const quantity = ing.quantity || 1;\n    return sum + ing.cost * quantity;\n  }, 0) + packagingNeeded.cost;\n  const expectedRevenue = strain.salePrice * quantity;\n  const expectedProfit = expectedRevenue - productionCost;\n  return {\n    id: Date.now(),\n    strainId: strain.id,\n    strainName: strain.name,\n    drugType: strain.drugType || 'weed',\n    plannedQuantity: quantity,\n    status: 'planned',\n    dateCreated: new Date().toISOString(),\n    dateSold: null,\n    totalIngredientNeeds: [seedIngredient, ...ingredientsNeeded],\n    packagingNeeded: packagingNeeded,\n    productionCost: productionCost,\n    expectedRevenue: expectedRevenue,\n    expectedProfit: expectedProfit\n  };\n};","map":{"version":3,"names":["calculateEffectMultiplier","currentEffects","Array","isArray","length","effectMultipliers","reduce","total","effect","calculateRecommendedPrice","effects","productType","basePrice","effectMultiplier","Math","round","calculateTotalUnits","selectedSeed","drugType","calculateIngredientCost","currentMix","ingredient","quantity","cost","calculateTotalCost","ingredientsCost","seedCostPerUnit","totalUnits","calculateProfit","salePrice","calculateProfitMargin","toFixed","calculateTotalBatchProfit","priceMultiplier","profitPerUnit","calculatePackagingProfit","packagingType","packagingCost","jarsNeeded","ceil","calculateSalePriceFromMargin","targetMargin","margin","parseFloat","calculatedPrice","calculatePackagingNeeds","type","calculateProductionPlan","strain","seed","parseInt","seedsOrBatchesNeeded","seedCost","ingredientsNeeded","ingredients","map","name","totalCost","seedIngredient","packagingNeeded","productionCost","sum","ing","expectedRevenue","expectedProfit","id","Date","now","strainId","strainName","plannedQuantity","status","dateCreated","toISOString","dateSold","totalIngredientNeeds"],"sources":["C:/Users/joshu/OneDrive/Documents/_Technical Projects/Doponomics/dopeonomics/src/pricing.js"],"sourcesContent":["// pricing.js - Centralized pricing functions for the application\r\n\r\n// Calculate effect multiplier for price calculations\r\nexport const calculateEffectMultiplier = (currentEffects) => {\r\n  // Add a safety check to ensure currentEffects is an array\r\n  if (!currentEffects || !Array.isArray(currentEffects) || currentEffects.length === 0) {\r\n    return 0;\r\n  }\r\n  \r\n  // Multiplier values for each effect\r\n  const effectMultipliers = {\r\n    'Anti-Gravity': 0.54,\r\n    'Athletic': 0.32,\r\n    'Balding': 0.30,\r\n    'Bright-Eyed': 0.40,\r\n    'Calming': 0.10,\r\n    'Calorie-Dense': 0.28,\r\n    'Cyclopean': 0.56,\r\n    'Disorienting': 0.00,\r\n    'Electrifying': 0.50,\r\n    'Energizing': 0.22,\r\n    'Euphoric': 0.18,\r\n    'Explosive': 0.00,\r\n    'Focused': 0.16,\r\n    'Foggy': 0.36,\r\n    'Gingeritis': 0.20,\r\n    'Glowing': 0.48,\r\n    'Jennerising': 0.42,\r\n    'Laxative': 0.00,\r\n    'Long-Faced': 0.52,\r\n    'Munchies': 0.12,\r\n    'Paranoia': 0.00,\r\n    'Refreshing': 0.14,\r\n    'Schizophrenia': 0.00,\r\n    'Sedating': 0.26,\r\n    'Seizure-Inducing': 0.00,\r\n    'Shrinking': 0.60,\r\n    'Slippery': 0.34,\r\n    'Smelly': 0.00,\r\n    'Sneaky': 0.24,\r\n    'Spicy': 0.38,\r\n    'Thought-Provoking': 0.44,\r\n    'Toxic': 0.00,\r\n    'Tropic Thunder': 0.46,\r\n    'Zombifying': 0.58\r\n  };\r\n  \r\n  // Sum up the multipliers for all effects\r\n  return currentEffects.reduce((total, effect) => {\r\n    return total + (effectMultipliers[effect] || 0);\r\n  }, 0);\r\n};\r\n\r\n// Calculate recommended price based on drug type and effects\r\nexport const calculateRecommendedPrice = (effects, productType = 'Weed') => {\r\n  // Add safety check for effects\r\n  if (!effects || !Array.isArray(effects)) {\r\n    effects = [];\r\n  }\r\n  \r\n  // Get base price based on drug type\r\n  const basePrice = productType === 'Weed' ? 35 : \r\n                    productType === 'Meth' ? 70 : \r\n                    productType === 'Cocaine' ? 90 : 35;\r\n  \r\n  const effectMultiplier = calculateEffectMultiplier(effects);\r\n  return Math.round(basePrice * (1 + effectMultiplier));\r\n};\r\n\r\n// Calculate total yield units based on drug type\r\nexport const calculateTotalUnits = (selectedSeed) => {\r\n  if (!selectedSeed) return 0;\r\n  \r\n  if (selectedSeed.drugType === 'weed') {\r\n    return 12; // Weed yields 12 buds per seed\r\n  } else if (selectedSeed.drugType === 'meth') {\r\n    return 10; // Meth yields 10 crystals per batch\r\n  } else if (selectedSeed.drugType === 'cocaine') {\r\n    return 10; // Cocaine yields 10 grams per batch\r\n  }\r\n  \r\n  return 12; // Default fallback\r\n};\r\n\r\n// Calculate total ingredient cost\r\nexport const calculateIngredientCost = (currentMix) => {\r\n  if (!currentMix || !Array.isArray(currentMix)) {\r\n    return 0;\r\n  }\r\n  \r\n  return currentMix.reduce((total, ingredient) => {\r\n    const quantity = ingredient.quantity || 1;\r\n    return total + (ingredient.cost * quantity);\r\n  }, 0);\r\n};\r\n\r\n// Calculate total cost including seed cost per unit\r\nexport const calculateTotalCost = (selectedSeed, currentMix) => {\r\n  if (!selectedSeed) return 0;\r\n  if (!currentMix || !Array.isArray(currentMix)) {\r\n    currentMix = [];\r\n  }\r\n  \r\n  const ingredientsCost = calculateIngredientCost(currentMix);\r\n  \r\n  // Calculate seed cost per unit based on drug type\r\n  let seedCostPerUnit;\r\n  const totalUnits = calculateTotalUnits(selectedSeed);\r\n  \r\n  seedCostPerUnit = selectedSeed.cost / totalUnits;\r\n  \r\n  return seedCostPerUnit + ingredientsCost;\r\n};\r\n\r\n// Calculate profit per unit\r\nexport const calculateProfit = (salePrice, selectedSeed, currentMix) => {\r\n  return salePrice - calculateTotalCost(selectedSeed, currentMix);\r\n};\r\n\r\n// Calculate profit margin percentage\r\nexport const calculateProfitMargin = (salePrice, selectedSeed, currentMix) => {\r\n  const cost = calculateTotalCost(selectedSeed, currentMix);\r\n  if (cost === 0 || salePrice === 0) return 0;\r\n  return ((salePrice - cost) / salePrice * 100).toFixed(1);\r\n};\r\n\r\n// Calculate total profit for entire batch with multiplier\r\nexport const calculateTotalBatchProfit = (salePrice, selectedSeed, currentMix, priceMultiplier) => {\r\n  const profitPerUnit = calculateProfit(salePrice, selectedSeed, currentMix);\r\n  const totalUnits = calculateTotalUnits(selectedSeed);\r\n  return profitPerUnit * totalUnits * priceMultiplier;\r\n};\r\n\r\n// Calculate packaging costs and profit based on drug type\r\nexport const calculatePackagingProfit = (salePrice, selectedSeed, currentMix, packagingType) => {\r\n  const profitPerUnit = calculateProfit(salePrice, selectedSeed, currentMix);\r\n  const totalUnits = calculateTotalUnits(selectedSeed);\r\n  \r\n  if (packagingType === 'baggies') {\r\n    // $1 per baggie, one unit per baggie\r\n    const packagingCost = 1 * totalUnits;\r\n    return (profitPerUnit * totalUnits) - packagingCost;\r\n  } else {\r\n    // Jars: $3 per jar, 5 units per jar, with the last jar potentially not full\r\n    const jarsNeeded = Math.ceil(totalUnits / 5);\r\n    const packagingCost = 3 * jarsNeeded;\r\n    return (profitPerUnit * totalUnits) - packagingCost;\r\n  }\r\n};\r\n\r\n// Calculate the sale price from a target margin\r\nexport const calculateSalePriceFromMargin = (targetMargin, selectedSeed, currentMix) => {\r\n  if (!targetMargin || !selectedSeed) return 0;\r\n  \r\n  const cost = calculateTotalCost(selectedSeed, currentMix);\r\n  if (cost === 0) return 0;\r\n  \r\n  const margin = parseFloat(targetMargin) / 100;\r\n  const calculatedPrice = cost / (1 - margin);\r\n  return Math.round(calculatedPrice);\r\n};\r\n\r\n// Calculate packaging needs for a given quantity\r\nexport const calculatePackagingNeeds = (quantity, type) => {\r\n  if (type === 'baggies') {\r\n    return {\r\n      type: 'baggies',\r\n      quantity: quantity,\r\n      cost: quantity\r\n    };\r\n  } else {\r\n    const jarsNeeded = Math.ceil(quantity / 5);\r\n    return {\r\n      type: 'jars',\r\n      quantity: jarsNeeded,\r\n      cost: jarsNeeded * 3\r\n    };\r\n  }\r\n};\r\n\r\n// Calculate production plan data for a strain\r\nexport const calculateProductionPlan = (strain, quantity) => {\r\n  // Safety checks\r\n  if (!strain || !strain.seed) return null;\r\n  \r\n  // Ensure quantity is a valid number\r\n  quantity = parseInt(quantity) || calculateTotalUnits(strain.seed);\r\n  \r\n  const seedsOrBatchesNeeded = Math.ceil(quantity / calculateTotalUnits(strain.seed));\r\n  const seedCost = seedsOrBatchesNeeded * strain.seed.cost;\r\n  \r\n  const ingredientsNeeded = (strain.ingredients || []).map(ingredient => {\r\n    const quantity = ingredient.quantity || 1;\r\n    return {\r\n      name: ingredient.name,\r\n      quantity: quantity,\r\n      totalCost: ingredient.cost * quantity\r\n    };\r\n  });\r\n  \r\n  const seedIngredient = {\r\n    name: strain.seed.name,\r\n    quantity: seedsOrBatchesNeeded,\r\n    totalCost: seedCost\r\n  };\r\n  \r\n  const packagingNeeded = calculatePackagingNeeds(quantity, strain.packagingType || 'baggies');\r\n  \r\n  const productionCost = seedCost + \r\n    (strain.ingredients || []).reduce((sum, ing) => {\r\n      const quantity = ing.quantity || 1;\r\n      return sum + (ing.cost * quantity);\r\n    }, 0) + \r\n    packagingNeeded.cost;\r\n  \r\n  const expectedRevenue = strain.salePrice * quantity;\r\n  const expectedProfit = expectedRevenue - productionCost;\r\n  \r\n  return {\r\n    id: Date.now(),\r\n    strainId: strain.id,\r\n    strainName: strain.name,\r\n    drugType: strain.drugType || 'weed',\r\n    plannedQuantity: quantity,\r\n    status: 'planned',\r\n    dateCreated: new Date().toISOString(),\r\n    dateSold: null,\r\n    totalIngredientNeeds: [seedIngredient, ...ingredientsNeeded],\r\n    packagingNeeded: packagingNeeded,\r\n    productionCost: productionCost,\r\n    expectedRevenue: expectedRevenue,\r\n    expectedProfit: expectedProfit\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}