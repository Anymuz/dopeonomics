{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joshu\\\\OneDrive\\\\Documents\\\\_Technical Projects\\\\Doponomics\\\\dopeonomics\\\\src\\\\StrainCreator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { CheckCircle, FlaskConical, Factory, Heart, Users, Package, Beaker, BarChart2 } from 'lucide-react';\n\n// Import  components\nimport StorageService from './StorageService';\nimport AutoSave from './AutoSave';\nimport DopeyHeader from './DopeyHeader';\nimport CombinedStrainsTab from './CombinedStrainsTab';\nimport EffectBuilderTab from './EffectBuilderTab';\nimport ProductionPlanningTab from './ProductionPlanningTab';\nimport { SeedSelector } from './IngredientComponents';\nimport { CurrentMixDisplay } from './MixDisplayComponents';\nimport { SequentialIngredientsSelector } from './SequentialIngredientsSelector';\nimport { PackagingSelector, PriceMarginInputs } from './PackagingComponents';\nimport { ProfitInfoDisplay } from './ProfitComponents';\nimport { DrugTypeSelector } from './DrugTypeSelector';\nimport { NamePromptModal } from './NamePromptModal';\nimport SalesHistoryTab from './SalesHistoryTab';\nimport CrewManagementTab from './CrewManagementTab';\nimport SupplyManagementTab from './SupplyManagementTab';\n\n// Import data\nimport { seedTypes, ingredients, additiveEffects, effectColors, drugTypes, calculateStrainEffects } from './straindata';\n\n// Import pricing functions\nimport { calculateRecommendedPrice, calculateTotalUnits, calculateTotalCost, calculateProfit, calculateProfitMargin, calculateTotalBatchProfit, calculatePackagingProfit, calculateSalePriceFromMargin, calculateProductionPlan } from './pricing';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StrainCreator = () => {\n  _s();\n  // State for strain creation\n  const [selectedSeed, setSelectedSeed] = useState(StorageService.loadSelectedSeed());\n  const [selectedDrugType, setSelectedDrugType] = useState(StorageService.loadSelectedDrugType());\n  const [currentMix, setCurrentMix] = useState(StorageService.loadCurrentMix() || []);\n  const [currentEffects, setCurrentEffects] = useState([]);\n  const [mixingHistory, setMixingHistory] = useState([]);\n  const [mixes, setMixes] = useState(StorageService.loadMixes() || []);\n\n  // Pricing and display states\n  const priceSettings = StorageService.loadPriceSettings() || {\n    salePrice: 0,\n    targetMargin: '',\n    priceMultiplier: 1,\n    packagingType: 'baggies'\n  };\n  const [salePrice, setSalePrice] = useState(priceSettings.salePrice);\n  const [targetMargin, setTargetMargin] = useState(priceSettings.targetMargin);\n  const [priceMultiplier, setPriceMultiplier] = useState(priceSettings.priceMultiplier);\n  const [packagingType, setPackagingType] = useState(priceSettings.packagingType);\n\n  // UI states\n  const [activeTab, setActiveTab] = useState(StorageService.loadActiveTab() || 'creator');\n  const [showNamePrompt, setShowNamePrompt] = useState(false);\n\n  // Supply management states\n  const [supplies, setSupplies] = useState(StorageService.loadSupplies() || {\n    seeds: {},\n    ingredients: {},\n    packaging: {\n      baggies: 0,\n      jars: 0\n    }\n  });\n  const [supplyHistory, setSupplyHistory] = useState(StorageService.loadSupplyHistory() || []);\n\n  // Sort and filter states\n  const sortSettings = StorageService.loadSortSettings() || {\n    column: 'name',\n    direction: 'asc'\n  };\n  const [sortColumn, setSortColumn] = useState(sortSettings.column);\n  const [sortDirection, setSortDirection] = useState(sortSettings.direction);\n  const [filterOptions, setFilterOptions] = useState(StorageService.loadFilterOptions() || {\n    name: '',\n    seedType: '',\n    drugType: '',\n    effect: ''\n  });\n\n  // Production and sales states\n  const [productionPlans, setProductionPlans] = useState(StorageService.loadProductionPlans() || []);\n  const [salesHistory, setSalesHistory] = useState(StorageService.loadSalesHistory() || []);\n\n  // Crew management states\n  const [dealers, setDealers] = useState(StorageService.loadDealers() || []);\n  const [crewMembers, setCrewMembers] = useState(StorageService.loadCrewMembers() || {\n    botanist: 0,\n    cleaner: 0,\n    handler: 0,\n    chemist: 0\n  });\n  const [dealerTransactions, setDealerTransactions] = useState(StorageService.loadDealerTransactions() || []);\n  const [dailySales, setDailySales] = useState(StorageService.loadDailySales() || []);\n\n  // Reset everything when drug type changes\n  useEffect(() => {\n    setSelectedSeed(null);\n    setCurrentMix([]);\n    setCurrentEffects([]);\n    setMixingHistory([]);\n    StorageService.saveSelectedDrugType(selectedDrugType);\n  }, [selectedDrugType]);\n\n  // Update effects when seed changes\n  useEffect(() => {\n    if (selectedSeed) {\n      // Reset mix when seed changes\n      setCurrentMix([]);\n      const seedEffect = selectedSeed.effect;\n      setCurrentEffects([seedEffect]);\n\n      // Initialize mixing history with just the seed\n      setMixingHistory([{\n        step: 0,\n        ingredient: \"Base Seed\",\n        effectsBefore: [],\n        effectsAfter: [seedEffect],\n        changes: [`Added ${seedEffect}`]\n      }]);\n      StorageService.saveSelectedSeed(selectedSeed);\n\n      // Update recommended price based on the seed's effect\n      const recommendedPrice = calculateRecommendedPrice([seedEffect], selectedDrugType);\n      setSalePrice(recommendedPrice);\n    } else {\n      setCurrentEffects([]);\n      setMixingHistory([]);\n    }\n  }, [selectedSeed, selectedDrugType]);\n\n  // Sequential ingredient addition method\n  const addIngredient = ingredient => {\n    // Add ingredient to the current mix\n    const updatedMix = [...currentMix, ingredient];\n    setCurrentMix(updatedMix);\n\n    // Recalculate effects using the sequential approach\n    if (selectedSeed) {\n      const result = calculateStrainEffects(selectedSeed.effect, updatedMix);\n      setCurrentEffects(result.finalEffects);\n      setMixingHistory(result.mixingHistory);\n\n      // Update recommended price\n      const recommendedPrice = calculateRecommendedPrice(result.finalEffects, selectedDrugType);\n      setSalePrice(recommendedPrice);\n\n      // Save to storage\n      StorageService.saveCurrentMix(updatedMix);\n    }\n  };\n\n  // Method to remove the last ingredient added\n  const removeLastIngredient = () => {\n    if (currentMix.length === 0) return;\n    const updatedMix = currentMix.slice(0, currentMix.length - 1);\n    setCurrentMix(updatedMix);\n\n    // Recalculate effects using the sequential approach\n    if (selectedSeed) {\n      const result = calculateStrainEffects(selectedSeed.effect, updatedMix);\n      setCurrentEffects(result.finalEffects);\n      setMixingHistory(result.mixingHistory);\n\n      // Update recommended price\n      const recommendedPrice = calculateRecommendedPrice(result.finalEffects, selectedDrugType);\n      setSalePrice(recommendedPrice);\n\n      // Save to storage\n      StorageService.saveCurrentMix(updatedMix);\n    }\n  };\n\n  // Method to reset the mix completely\n  const resetMix = () => {\n    setCurrentMix([]);\n    if (selectedSeed) {\n      setCurrentEffects([selectedSeed.effect]);\n      setMixingHistory([{\n        step: 0,\n        ingredient: \"Base Seed\",\n        effectsBefore: [],\n        effectsAfter: [selectedSeed.effect],\n        changes: [`Added ${selectedSeed.effect}`]\n      }]);\n\n      // Update recommended price\n      const recommendedPrice = calculateRecommendedPrice([selectedSeed.effect], selectedDrugType);\n      setSalePrice(recommendedPrice);\n\n      // Save to storage\n      StorageService.saveCurrentMix([]);\n    } else {\n      setCurrentEffects([]);\n      setMixingHistory([]);\n    }\n  };\n\n  // Method to finalize the mix and proceed to pricing/saving\n  const finalizeMix = () => {\n    if (currentMix.length > 0 && selectedSeed) {\n      // Activate the save prompt\n      setShowNamePrompt(true);\n    }\n  };\n\n  // Local wrapper functions for pricing calculations\n  const getTotalCost = useCallback(() => {\n    return calculateTotalCost(selectedSeed, currentMix);\n  }, [selectedSeed, currentMix]);\n  const getProfit = useCallback(() => {\n    return calculateProfit(salePrice, selectedSeed, currentMix);\n  }, [salePrice, selectedSeed, currentMix]);\n  const getProfitMargin = useCallback(() => {\n    return calculateProfitMargin(salePrice, selectedSeed, currentMix);\n  }, [salePrice, selectedSeed, currentMix]);\n  const getTotalBatchProfit = useCallback(() => {\n    return calculateTotalBatchProfit(salePrice, selectedSeed, currentMix, priceMultiplier);\n  }, [salePrice, selectedSeed, currentMix, priceMultiplier]);\n  const getPackagingProfit = useCallback(() => {\n    return calculatePackagingProfit(salePrice, selectedSeed, currentMix, packagingType);\n  }, [salePrice, selectedSeed, currentMix, packagingType]);\n  const getTotalUnits = useCallback(() => {\n    return calculateTotalUnits(selectedSeed);\n  }, [selectedSeed]);\n\n  // Price/margin calculation handlers\n  const handleCalculateSalePriceFromMargin = () => {\n    if (targetMargin && getTotalCost() > 0) {\n      const calculatedPrice = calculateSalePriceFromMargin(targetMargin, selectedSeed, currentMix);\n      setSalePrice(calculatedPrice);\n    }\n  };\n  const handleCalculateMarginFromSalePrice = () => {\n    if (salePrice > 0 && getTotalCost() > 0) {\n      const margin = (salePrice - getTotalCost()) / salePrice * 100;\n      setTargetMargin(isNaN(margin) ? '' : margin.toFixed(2));\n    }\n  };\n\n  // Save mix function\n  const saveMix = name => {\n    if (!name.trim()) return;\n    const newMix = {\n      id: Date.now(),\n      name: name.trim(),\n      seed: selectedSeed,\n      drugType: selectedDrugType,\n      totalUnits: getTotalUnits(),\n      ingredients: [...currentMix],\n      effects: [...currentEffects],\n      mixingSequence: [...currentMix].map(ing => ing.name),\n      // Store the exact sequence\n      salePrice: Math.round(parseFloat(salePrice)),\n      totalCost: getTotalCost(),\n      profit: getProfit(),\n      profitMargin: getProfitMargin(),\n      priceMultiplier: priceMultiplier,\n      packagingType: packagingType,\n      favorite: false,\n      dateCreated: new Date().toISOString()\n    };\n    setMixes(prev => [...prev, newMix]);\n    resetMix();\n    setSelectedSeed(null);\n    setSalePrice(0);\n  };\n\n  // Mix management functions\n  const removeMix = id => {\n    setMixes(prev => prev.filter(mix => mix.id !== id));\n  };\n\n  // Toggle favorite status\n  const toggleFavorite = id => {\n    setMixes(prev => prev.map(mix => mix.id === id ? {\n      ...mix,\n      favorite: !mix.favorite\n    } : mix));\n  };\n\n  // Production planning functions\n  const addToProduction = strainId => {\n    const strain = mixes.find(mix => mix.id === strainId);\n    if (!strain) return;\n\n    // Default to production based on drug type yield\n    const defaultQuantity = calculateTotalUnits(strain.seed);\n\n    // Create a production plan with properly calculated ingredient quantities\n    const productionPlan = createEnhancedProductionPlan(strain, defaultQuantity);\n    setProductionPlans(prev => [...prev, productionPlan]);\n    // Switch to production tab\n    setActiveTab('production');\n  };\n\n  // Calculate packaging needs for a given quantity\n  const calculatePackagingNeeds = (quantity, type) => {\n    if (type === 'baggies') {\n      return {\n        type: 'baggies',\n        quantity: quantity,\n        cost: quantity\n      };\n    } else {\n      const jarsNeeded = Math.ceil(quantity / 5);\n      return {\n        type: 'jars',\n        quantity: jarsNeeded,\n        cost: jarsNeeded * 3\n      };\n    }\n  };\n\n  // Enhanced production plan creation with proper ingredient calculations\n  const createEnhancedProductionPlan = (strain, quantity) => {\n    // First, count how many times each ingredient appears in the mix sequence\n    const ingredientCounts = {};\n    if (strain.mixingSequence) {\n      // Count ingredient usage from the mixing sequence\n      strain.mixingSequence.forEach(ingredientName => {\n        ingredientCounts[ingredientName] = (ingredientCounts[ingredientName] || 0) + 1;\n      });\n    } else if (strain.ingredients) {\n      // Fallback to ingredients array if mixingSequence not available\n      strain.ingredients.forEach(ingredient => {\n        const name = ingredient.name;\n        const qty = ingredient.quantity || 1;\n        ingredientCounts[name] = (ingredientCounts[name] || 0) + qty;\n      });\n    }\n\n    // Now calculate the proper ingredient needs\n    const enhancedIngredientNeeds = [];\n\n    // Add the seed/base precursor first\n    const seedsNeeded = Math.ceil(quantity / calculateTotalUnits(strain.seed));\n    const seedIngredient = {\n      name: strain.seed.name,\n      quantity: seedsNeeded,\n      totalCost: strain.seed.cost * seedsNeeded\n    };\n    enhancedIngredientNeeds.push(seedIngredient);\n\n    // Add drug-specific base ingredients\n    if (strain.drugType === 'meth') {\n      // Add required meth production ingredients\n      enhancedIngredientNeeds.push({\n        name: \"Acid\",\n        quantity: seedsNeeded,\n        // One per batch\n        totalCost: 40 * seedsNeeded\n      });\n      enhancedIngredientNeeds.push({\n        name: \"Red Phosphorus\",\n        quantity: seedsNeeded,\n        // One per batch\n        totalCost: 40 * seedsNeeded\n      });\n    } else if (strain.drugType === 'cocaine') {\n      // Add required cocaine production ingredients\n      enhancedIngredientNeeds.push({\n        name: \"Coca Leaves\",\n        quantity: 20 * seedsNeeded,\n        // 20 leaves per batch\n        totalCost: strain.seed.cost / 10 * 20 * seedsNeeded // Estimate cost based on seed\n      });\n\n      // Gasoline is already in common ingredients, but ensure it's added for cocaine\n      if (!ingredientCounts['Gasoline']) {\n        enhancedIngredientNeeds.push({\n          name: \"Gasoline\",\n          quantity: seedsNeeded,\n          // One per batch\n          totalCost: 30 * seedsNeeded\n        });\n      }\n    }\n\n    // Add all other ingredients with proper quantities\n    Object.entries(ingredientCounts).forEach(([name, count]) => {\n      // Find the ingredient in the strain's ingredients\n      const ingredient = strain.ingredients.find(ing => ing.name === name);\n      if (ingredient) {\n        enhancedIngredientNeeds.push({\n          name: name,\n          quantity: count * quantity,\n          // Multiply by the production quantity\n          totalCost: ingredient.cost * count * quantity\n        });\n      }\n    });\n\n    // Add packaging needs\n    const packagingNeeded = calculatePackagingNeeds(quantity, strain.packagingType || 'baggies');\n\n    // Calculate total production cost\n    const productionCost = enhancedIngredientNeeds.reduce((sum, ing) => sum + ing.totalCost, 0) + packagingNeeded.cost;\n\n    // Expected revenue and profit\n    const expectedRevenue = strain.salePrice * quantity;\n    const expectedProfit = expectedRevenue - productionCost;\n\n    // Create the production plan object\n    return {\n      id: Date.now(),\n      strainId: strain.id,\n      strainName: strain.name,\n      drugType: strain.drugType || 'weed',\n      plannedQuantity: quantity,\n      status: 'planned',\n      dateCreated: new Date().toISOString(),\n      dateSold: null,\n      totalIngredientNeeds: enhancedIngredientNeeds,\n      packagingNeeded: packagingNeeded,\n      productionCost: productionCost,\n      salePrice: strain.salePrice,\n      expectedRevenue: expectedRevenue,\n      expectedProfit: expectedProfit,\n      effects: strain.effects,\n      // Make sure effects are passed through\n      productionStage: 'plan' // Start at planning stage\n    };\n  };\n\n  // Function to update a production plan\n  const updateProductionPlan = (planId, updates) => {\n    setProductionPlans(prev => prev.map(plan => {\n      if (plan.id !== planId) return plan;\n\n      // If quantity changed, recalculate everything\n      if (updates.plannedQuantity && updates.plannedQuantity !== plan.plannedQuantity) {\n        const strain = mixes.find(mix => mix.id === plan.strainId);\n        if (strain) {\n          // Use our enhanced function for recalculation\n          const updatedPlan = createEnhancedProductionPlan(strain, updates.plannedQuantity);\n          // Preserve the original ID and any stage-specific data\n          return {\n            ...updatedPlan,\n            id: plan.id,\n            dateCreated: plan.dateCreated,\n            productionStage: updates.productionStage || plan.productionStage,\n            purchasedIngredients: updates.purchasedIngredients || plan.purchasedIngredients,\n            cookingSteps: updates.cookingSteps || plan.cookingSteps,\n            sellingData: updates.sellingData || plan.sellingData\n          };\n        }\n      }\n\n      // If price changed, recalculate revenue and profit\n      if (updates.salePrice && updates.salePrice !== plan.salePrice) {\n        const newExpectedRevenue = plan.plannedQuantity * updates.salePrice;\n        return {\n          ...plan,\n          ...updates,\n          expectedRevenue: newExpectedRevenue,\n          expectedProfit: newExpectedRevenue - plan.productionCost\n        };\n      }\n\n      // For all other updates\n      return {\n        ...plan,\n        ...updates\n      };\n    }));\n  };\n  const markAsSold = planId => {\n    const plan = productionPlans.find(p => p.id === planId);\n    if (!plan || plan.status === 'sold') return;\n\n    // Create a sale record\n    const saleRecord = {\n      id: Date.now(),\n      productionId: plan.id,\n      strainId: plan.strainId,\n      strainName: plan.strainName,\n      drugType: plan.drugType,\n      quantitySold: plan.plannedQuantity,\n      totalRevenue: plan.expectedRevenue,\n      totalCost: plan.productionCost,\n      profit: plan.expectedProfit,\n      dateSold: new Date().toISOString()\n    };\n\n    // Update production plan status\n    updateProductionPlan(planId, {\n      status: 'sold',\n      dateSold: saleRecord.dateSold\n    });\n\n    // Add to sales history\n    setSalesHistory(prev => [...prev, saleRecord]);\n  };\n  const removeProductionPlan = planId => {\n    setProductionPlans(prev => prev.filter(plan => plan.id !== planId));\n  };\n  const reproduceProductionPlan = (originalPlan, newQuantity, quality) => {\n    // Get the original strain information\n    const strain = mixes.find(mix => mix.id === originalPlan.strainId);\n    if (!strain) {\n      console.error(\"Unable to find strain for reproduction\");\n      return;\n    }\n\n    // Calculate a new production plan with the updated quantity\n    const newPlan = calculateProductionPlan(strain, newQuantity, quality);\n\n    // Add the new plan to production plans\n    setProductionPlans(prev => [...prev, newPlan]);\n\n    // Switch to the production tab\n    setActiveTab('production');\n  };\n\n  // Sorting and filtering\n  const handleSort = column => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n\n  // Tab switching\n  const handleTabChange = tab => {\n    setActiveTab(tab);\n    StorageService.saveActiveTab(tab);\n  };\n\n  // Filter and sort mixes\n  const filteredAndSortedMixes = useMemo(() => {\n    // First filter by strain view (all or favorites)\n    let filtered = [...mixes];\n\n    // Then apply additional filters\n    filtered = filtered.filter(mix => {\n      // Filter by strain name\n      if (filterOptions.name && !mix.name.toLowerCase().includes(filterOptions.name.toLowerCase())) {\n        return false;\n      }\n\n      // Filter by drug type\n      if (filterOptions.drugType && mix.drugType !== filterOptions.drugType) {\n        return false;\n      }\n\n      // Filter by seed type\n      if (filterOptions.seedType && !mix.seed.name.toLowerCase().includes(filterOptions.seedType.toLowerCase())) {\n        return false;\n      }\n\n      // Filter by effect\n      if (filterOptions.effect) {\n        const hasEffect = mix.effects.some(effect => effect.toLowerCase().includes(filterOptions.effect.toLowerCase()));\n        if (!hasEffect) return false;\n      }\n      return true;\n    });\n\n    // Sort items\n    return filtered.sort((a, b) => {\n      if (!sortColumn) return 0;\n      let aValue = sortColumn === 'seed' ? a.seed.name : a[sortColumn];\n      let bValue = sortColumn === 'seed' ? b.seed.name : b[sortColumn];\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = bValue.toLowerCase();\n      }\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [mixes, filterOptions, sortColumn, sortDirection]);\n\n  // Manual save function for the AutoSave component\n  const handleManualSave = useCallback(() => {\n    // Save all current state to storage\n    StorageService.saveSelectedDrugType(selectedDrugType);\n    StorageService.saveCurrentMix(currentMix);\n    StorageService.saveSelectedSeed(selectedSeed);\n    StorageService.saveMixes(mixes);\n    StorageService.saveProductionPlans(productionPlans);\n    StorageService.saveSalesHistory(salesHistory);\n    StorageService.saveActiveTab(activeTab);\n    StorageService.saveFilterOptions(filterOptions);\n    StorageService.saveSortSettings({\n      column: sortColumn,\n      direction: sortDirection\n    });\n    StorageService.savePriceSettings({\n      salePrice,\n      targetMargin,\n      priceMultiplier,\n      packagingType\n    });\n    StorageService.saveSupplies(supplies);\n    StorageService.saveSupplyHistory(supplyHistory);\n    StorageService.saveDealers(dealers);\n    StorageService.saveCrewMembers(crewMembers);\n    StorageService.saveDealerTransactions(dealerTransactions);\n    StorageService.saveDailySales(dailySales);\n  }, [selectedDrugType, currentMix, selectedSeed, mixes, productionPlans, salesHistory, activeTab, filterOptions, sortColumn, sortDirection, salePrice, targetMargin, priceMultiplier, packagingType, supplies, supplyHistory, dealers, crewMembers, dealerTransactions, dailySales]);\n\n  // Create a game state object to pass to AutoSave\n  const gameState = useMemo(() => ({\n    mixes,\n    productionPlans,\n    salesHistory,\n    activeTab,\n    filterOptions,\n    sortSettings: {\n      column: sortColumn,\n      direction: sortDirection\n    },\n    priceSettings: {\n      salePrice,\n      targetMargin,\n      priceMultiplier,\n      packagingType\n    },\n    currentMix,\n    selectedSeed,\n    selectedDrugType,\n    supplies,\n    supplyHistory,\n    dealers,\n    crewMembers,\n    dealerTransactions,\n    dailySales\n  }), [mixes, productionPlans, salesHistory, activeTab, filterOptions, sortColumn, sortDirection, salePrice, targetMargin, priceMultiplier, packagingType, currentMix, selectedSeed, selectedDrugType, supplies, supplyHistory, dealers, crewMembers, dealerTransactions, dailySales]);\n\n  // Save data to storage when it changes\n  useEffect(() => {\n    StorageService.saveMixes(mixes);\n  }, [mixes]);\n  useEffect(() => {\n    StorageService.saveProductionPlans(productionPlans);\n  }, [productionPlans]);\n  useEffect(() => {\n    StorageService.saveSalesHistory(salesHistory);\n  }, [salesHistory]);\n  useEffect(() => {\n    StorageService.saveActiveTab(activeTab);\n  }, [activeTab]);\n  useEffect(() => {\n    StorageService.saveFilterOptions(filterOptions);\n  }, [filterOptions]);\n  useEffect(() => {\n    StorageService.saveSortSettings({\n      column: sortColumn,\n      direction: sortDirection\n    });\n  }, [sortColumn, sortDirection]);\n  useEffect(() => {\n    StorageService.savePriceSettings({\n      salePrice,\n      targetMargin,\n      priceMultiplier,\n      packagingType\n    });\n  }, [salePrice, targetMargin, priceMultiplier, packagingType]);\n  useEffect(() => {\n    StorageService.saveCurrentMix(currentMix);\n  }, [currentMix]);\n  useEffect(() => {\n    StorageService.saveSupplies(supplies);\n  }, [supplies]);\n  useEffect(() => {\n    StorageService.saveSupplyHistory(supplyHistory);\n  }, [supplyHistory]);\n  useEffect(() => {\n    StorageService.saveDealers(dealers);\n  }, [dealers]);\n  useEffect(() => {\n    StorageService.saveCrewMembers(crewMembers);\n  }, [crewMembers]);\n  useEffect(() => {\n    StorageService.saveDealerTransactions(dealerTransactions);\n  }, [dealerTransactions]);\n  useEffect(() => {\n    StorageService.saveDailySales(dailySales);\n  }, [dailySales]);\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gradient-to-br from-gray-100 to-gray-50 min-h-screen flex justify-center items-start py-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-5xl mx-auto p-4\",\n      children: [/*#__PURE__*/_jsxDEV(DopeyHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex border-b border-gray-200 mb-6 overflow-x-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'creator' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => handleTabChange('creator'),\n          children: [/*#__PURE__*/_jsxDEV(FlaskConical, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 11\n          }, this), \"Creator\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'effects' ? 'text-purple-600 border-b-2 border-purple-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => handleTabChange('effects'),\n          children: [/*#__PURE__*/_jsxDEV(Beaker, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 11\n          }, this), \"Effect Builder\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'saved' ? 'text-green-600 border-b-2 border-green-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => {\n            handleTabChange('saved');\n          },\n          children: [/*#__PURE__*/_jsxDEV(Heart, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 11\n          }, this), \"My Strains\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'production' ? 'text-indigo-600 border-b-2 border-indigo-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => handleTabChange('production'),\n          children: [/*#__PURE__*/_jsxDEV(Factory, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 11\n          }, this), \"Production\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'crew' ? 'text-teal-600 border-b-2 border-teal-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => handleTabChange('crew'),\n          children: [/*#__PURE__*/_jsxDEV(Users, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 11\n          }, this), \"Crew\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'sales' ? 'text-orange-600 border-b-2 border-orange-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => handleTabChange('sales'),\n          children: [/*#__PURE__*/_jsxDEV(BarChart2, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 11\n          }, this), \"Sales\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `py-2 px-4 font-medium text-sm ${activeTab === 'supply' ? 'text-purple-600 border-b-2 border-purple-600' : 'text-gray-500 hover:text-gray-700'}`,\n          onClick: () => handleTabChange('supply'),\n          children: [/*#__PURE__*/_jsxDEV(Package, {\n            className: \"inline-block mr-1 w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 11\n          }, this), \"Supplies\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 13\n      }, this), activeTab === 'creator' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"strain-card\",\n        children: [/*#__PURE__*/_jsxDEV(DrugTypeSelector, {\n          selectedDrugType: selectedDrugType,\n          onSelectDrugType: setSelectedDrugType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SeedSelector, {\n          seedTypes: seedTypes,\n          selectedSeed: selectedSeed,\n          onSelectSeed: setSelectedSeed,\n          selectedDrugType: selectedDrugType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SequentialIngredientsSelector, {\n          ingredients: ingredients,\n          currentMix: currentMix,\n          currentEffects: currentEffects,\n          mixingHistory: mixingHistory,\n          effectColors: effectColors,\n          additiveEffects: additiveEffects,\n          addIngredient: addIngredient,\n          removeLastIngredient: removeLastIngredient,\n          resetMix: resetMix,\n          finalizeMix: finalizeMix,\n          selectedDrugType: selectedDrugType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrentMixDisplay, {\n          selectedSeed: selectedSeed,\n          currentMix: currentMix,\n          currentEffects: currentEffects,\n          effectColors: effectColors,\n          additiveEffects: additiveEffects,\n          calculateTotalCost: getTotalCost,\n          drugTypes: drugTypes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PackagingSelector, {\n          packagingType: packagingType,\n          setPackagingType: setPackagingType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PriceMarginInputs, {\n          salePrice: salePrice,\n          targetMargin: targetMargin,\n          priceMultiplier: priceMultiplier,\n          setPriceMultiplier: setPriceMultiplier,\n          setSalePrice: setSalePrice,\n          setTargetMargin: setTargetMargin,\n          calculateMarginFromSalePrice: handleCalculateMarginFromSalePrice,\n          calculateSalePriceFromMargin: handleCalculateSalePriceFromMargin,\n          currentEffects: currentEffects,\n          productType: selectedDrugType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 11\n        }, this), selectedSeed && salePrice > 0 && /*#__PURE__*/_jsxDEV(ProfitInfoDisplay, {\n          calculateProfit: getProfit,\n          calculateProfitMargin: getProfitMargin,\n          calculateTotalBuddyProfit: getTotalBatchProfit,\n          calculatePackagingProfit: getPackagingProfit,\n          priceMultiplier: priceMultiplier,\n          packagingType: packagingType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-primary\",\n          onClick: finalizeMix\n          //disabled={!selectedSeed || currentMix.length === 0 || salePrice <= 0}\n          ,\n          disabled: !selectedSeed || salePrice <= 0,\n          children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n            className: \"mr-2 w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 13\n          }, this), \"Save Creation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 9\n      }, this) : activeTab === 'effects' ? /*#__PURE__*/_jsxDEV(EffectBuilderTab, {\n        seedTypes: seedTypes,\n        ingredients: ingredients,\n        effectColors: effectColors,\n        drugTypes: drugTypes,\n        calculateStrainEffects: calculateStrainEffects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 9\n      }, this) : activeTab === 'saved' ? /*#__PURE__*/_jsxDEV(CombinedStrainsTab, {\n        mixes: filteredAndSortedMixes,\n        filterOptions: filterOptions,\n        setFilterOptions: setFilterOptions,\n        handleSort: handleSort,\n        sortColumn: sortColumn,\n        sortDirection: sortDirection,\n        removeMix: removeMix,\n        addToProduction: addToProduction,\n        toggleFavorite: toggleFavorite,\n        effectColors: effectColors,\n        drugTypes: drugTypes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 9\n      }, this) : activeTab === 'production' ? /*#__PURE__*/_jsxDEV(ProductionPlanningTab, {\n        strains: mixes,\n        productionPlans: productionPlans,\n        updateProductionPlan: updateProductionPlan,\n        markAsSold: markAsSold,\n        removeProductionPlan: removeProductionPlan,\n        reproduceProductionPlan: reproduceProductionPlan,\n        drugTypes: drugTypes,\n        dealers: dealers,\n        dailySales: dailySales,\n        setDailySales: setDailySales,\n        dealerTransactions: dealerTransactions,\n        setDealerTransactions: setDealerTransactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 9\n      }, this) : activeTab === 'supply' ? /*#__PURE__*/_jsxDEV(SupplyManagementTab, {\n        supplies: supplies,\n        setSupplies: setSupplies,\n        supplyHistory: supplyHistory,\n        setSupplyHistory: setSupplyHistory,\n        productionPlans: productionPlans,\n        drugTypes: drugTypes,\n        seedTypes: seedTypes,\n        ingredients: ingredients\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 9\n      }, this) : activeTab === 'sales' ? /*#__PURE__*/_jsxDEV(SalesHistoryTab, {\n        salesHistory: salesHistory,\n        reproduceProductionPlan: reproduceProductionPlan,\n        drugTypes: drugTypes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 9\n      }, this) : activeTab === 'crew' ? /*#__PURE__*/_jsxDEV(CrewManagementTab, {\n        dealers: dealers,\n        setDealers: setDealers,\n        crewMembers: crewMembers,\n        setCrewMembers: setCrewMembers,\n        dealerTransactions: dealerTransactions,\n        setDealerTransactions: setDealerTransactions,\n        dailySales: dailySales,\n        setDailySales: setDailySales,\n        drugTypes: drugTypes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 9\n      }, this) : null, /*#__PURE__*/_jsxDEV(NamePromptModal, {\n        isOpen: showNamePrompt,\n        onClose: () => setShowNamePrompt(false),\n        onSave: saveMix,\n        initialName: ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(AutoSave, {\n      gameState: gameState,\n      onManualSave: handleManualSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 737,\n    columnNumber: 9\n  }, this);\n};\n_s(StrainCreator, \"6SmvqPu5+YWp6CtjvRHkNlzJaSY=\");\n_c = StrainCreator;\nexport default StrainCreator;\nvar _c;\n$RefreshReg$(_c, \"StrainCreator\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","CheckCircle","FlaskConical","Factory","Heart","Users","Package","Beaker","BarChart2","StorageService","AutoSave","DopeyHeader","CombinedStrainsTab","EffectBuilderTab","ProductionPlanningTab","SeedSelector","CurrentMixDisplay","SequentialIngredientsSelector","PackagingSelector","PriceMarginInputs","ProfitInfoDisplay","DrugTypeSelector","NamePromptModal","SalesHistoryTab","CrewManagementTab","SupplyManagementTab","seedTypes","ingredients","additiveEffects","effectColors","drugTypes","calculateStrainEffects","calculateRecommendedPrice","calculateTotalUnits","calculateTotalCost","calculateProfit","calculateProfitMargin","calculateTotalBatchProfit","calculatePackagingProfit","calculateSalePriceFromMargin","calculateProductionPlan","jsxDEV","_jsxDEV","StrainCreator","_s","selectedSeed","setSelectedSeed","loadSelectedSeed","selectedDrugType","setSelectedDrugType","loadSelectedDrugType","currentMix","setCurrentMix","loadCurrentMix","currentEffects","setCurrentEffects","mixingHistory","setMixingHistory","mixes","setMixes","loadMixes","priceSettings","loadPriceSettings","salePrice","targetMargin","priceMultiplier","packagingType","setSalePrice","setTargetMargin","setPriceMultiplier","setPackagingType","activeTab","setActiveTab","loadActiveTab","showNamePrompt","setShowNamePrompt","supplies","setSupplies","loadSupplies","seeds","packaging","baggies","jars","supplyHistory","setSupplyHistory","loadSupplyHistory","sortSettings","loadSortSettings","column","direction","sortColumn","setSortColumn","sortDirection","setSortDirection","filterOptions","setFilterOptions","loadFilterOptions","name","seedType","drugType","effect","productionPlans","setProductionPlans","loadProductionPlans","salesHistory","setSalesHistory","loadSalesHistory","dealers","setDealers","loadDealers","crewMembers","setCrewMembers","loadCrewMembers","botanist","cleaner","handler","chemist","dealerTransactions","setDealerTransactions","loadDealerTransactions","dailySales","setDailySales","loadDailySales","saveSelectedDrugType","seedEffect","step","ingredient","effectsBefore","effectsAfter","changes","saveSelectedSeed","recommendedPrice","addIngredient","updatedMix","result","finalEffects","saveCurrentMix","removeLastIngredient","length","slice","resetMix","finalizeMix","getTotalCost","getProfit","getProfitMargin","getTotalBatchProfit","getPackagingProfit","getTotalUnits","handleCalculateSalePriceFromMargin","calculatedPrice","handleCalculateMarginFromSalePrice","margin","isNaN","toFixed","saveMix","trim","newMix","id","Date","now","seed","totalUnits","effects","mixingSequence","map","ing","Math","round","parseFloat","totalCost","profit","profitMargin","favorite","dateCreated","toISOString","prev","removeMix","filter","mix","toggleFavorite","addToProduction","strainId","strain","find","defaultQuantity","productionPlan","createEnhancedProductionPlan","calculatePackagingNeeds","quantity","type","cost","jarsNeeded","ceil","ingredientCounts","forEach","ingredientName","qty","enhancedIngredientNeeds","seedsNeeded","seedIngredient","push","Object","entries","count","packagingNeeded","productionCost","reduce","sum","expectedRevenue","expectedProfit","strainName","plannedQuantity","status","dateSold","totalIngredientNeeds","productionStage","updateProductionPlan","planId","updates","plan","updatedPlan","purchasedIngredients","cookingSteps","sellingData","newExpectedRevenue","markAsSold","p","saleRecord","productionId","quantitySold","totalRevenue","removeProductionPlan","reproduceProductionPlan","originalPlan","newQuantity","quality","console","error","newPlan","handleSort","handleTabChange","tab","saveActiveTab","filteredAndSortedMixes","filtered","toLowerCase","includes","hasEffect","some","sort","a","b","aValue","bValue","handleManualSave","saveMixes","saveProductionPlans","saveSalesHistory","saveFilterOptions","saveSortSettings","savePriceSettings","saveSupplies","saveSupplyHistory","saveDealers","saveCrewMembers","saveDealerTransactions","saveDailySales","gameState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSelectDrugType","onSelectSeed","calculateMarginFromSalePrice","productType","calculateTotalBuddyProfit","disabled","strains","isOpen","onClose","onSave","initialName","onManualSave","_c","$RefreshReg$"],"sources":["C:/Users/joshu/OneDrive/Documents/_Technical Projects/Doponomics/dopeonomics/src/StrainCreator.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport {\r\n  CheckCircle,\r\n  FlaskConical,\r\n  Factory,\r\n  Heart,\r\n  Users,\r\n  Package,\r\n  Beaker,\r\n  BarChart2\r\n} from 'lucide-react';\r\n\r\n// Import  components\r\nimport StorageService from './StorageService';\r\nimport AutoSave from './AutoSave';\r\nimport DopeyHeader from './DopeyHeader';\r\nimport CombinedStrainsTab from './CombinedStrainsTab';\r\nimport EffectBuilderTab from './EffectBuilderTab';\r\nimport ProductionPlanningTab from './ProductionPlanningTab';\r\nimport { SeedSelector } from './IngredientComponents';\r\nimport { CurrentMixDisplay } from './MixDisplayComponents';\r\nimport { SequentialIngredientsSelector } from './SequentialIngredientsSelector';\r\nimport { PackagingSelector, PriceMarginInputs} from './PackagingComponents';\r\nimport { ProfitInfoDisplay } from './ProfitComponents';\r\nimport { DrugTypeSelector } from './DrugTypeSelector';\r\nimport { NamePromptModal } from './NamePromptModal';\r\nimport SalesHistoryTab from './SalesHistoryTab';\r\nimport CrewManagementTab from './CrewManagementTab';\r\nimport SupplyManagementTab from './SupplyManagementTab';\r\n\r\n// Import data\r\nimport { \r\n  seedTypes, \r\n  ingredients, \r\n  additiveEffects, \r\n  effectColors,\r\n  drugTypes,\r\n  calculateStrainEffects\r\n} from './straindata';\r\n\r\n// Import pricing functions\r\nimport {\r\n  calculateRecommendedPrice,\r\n  calculateTotalUnits,\r\n  calculateTotalCost,\r\n  calculateProfit,\r\n  calculateProfitMargin,\r\n  calculateTotalBatchProfit,\r\n  calculatePackagingProfit,\r\n  calculateSalePriceFromMargin,\r\n  calculateProductionPlan,\r\n} from './pricing';\r\n\r\nconst StrainCreator = () => {\r\n  // State for strain creation\r\n  const [selectedSeed, setSelectedSeed] = useState(StorageService.loadSelectedSeed());\r\n  const [selectedDrugType, setSelectedDrugType] = useState(StorageService.loadSelectedDrugType());\r\n  const [currentMix, setCurrentMix] = useState(StorageService.loadCurrentMix() || []);\r\n  const [currentEffects, setCurrentEffects] = useState([]);\r\n  const [mixingHistory, setMixingHistory] = useState([]);\r\n  const [mixes, setMixes] = useState(StorageService.loadMixes() || []);\r\n  \r\n  // Pricing and display states\r\n  const priceSettings = StorageService.loadPriceSettings() || {\r\n    salePrice: 0,\r\n    targetMargin: '',\r\n    priceMultiplier: 1,\r\n    packagingType: 'baggies'\r\n  };\r\n  const [salePrice, setSalePrice] = useState(priceSettings.salePrice);\r\n  const [targetMargin, setTargetMargin] = useState(priceSettings.targetMargin);\r\n  const [priceMultiplier, setPriceMultiplier] = useState(priceSettings.priceMultiplier);\r\n  const [packagingType, setPackagingType] = useState(priceSettings.packagingType);\r\n  \r\n  // UI states\r\n  const [activeTab, setActiveTab] = useState(StorageService.loadActiveTab() || 'creator');\r\n  const [showNamePrompt, setShowNamePrompt] = useState(false);\r\n  \r\n  // Supply management states\r\n  const [supplies, setSupplies] = useState(StorageService.loadSupplies() || {\r\n    seeds: {},\r\n    ingredients: {},\r\n    packaging: { baggies: 0, jars: 0 }\r\n  });\r\n  const [supplyHistory, setSupplyHistory] = useState(StorageService.loadSupplyHistory() || []);\r\n  \r\n  // Sort and filter states\r\n  const sortSettings = StorageService.loadSortSettings() || { column: 'name', direction: 'asc' };\r\n  const [sortColumn, setSortColumn] = useState(sortSettings.column);\r\n  const [sortDirection, setSortDirection] = useState(sortSettings.direction);\r\n  const [filterOptions, setFilterOptions] = useState(StorageService.loadFilterOptions() || {\r\n    name: '',\r\n    seedType: '',\r\n    drugType: '',\r\n    effect: ''\r\n  });\r\n  \r\n  // Production and sales states\r\n  const [productionPlans, setProductionPlans] = useState(StorageService.loadProductionPlans() || []);\r\n  const [salesHistory, setSalesHistory] = useState(StorageService.loadSalesHistory() || []);\r\n\r\n  // Crew management states\r\n  const [dealers, setDealers] = useState(StorageService.loadDealers() || []);\r\n  const [crewMembers, setCrewMembers] = useState(StorageService.loadCrewMembers() || {\r\n    botanist: 0,\r\n    cleaner: 0,\r\n    handler: 0,\r\n    chemist: 0\r\n  });\r\n  const [dealerTransactions, setDealerTransactions] = useState(StorageService.loadDealerTransactions() || []);\r\n  const [dailySales, setDailySales] = useState(StorageService.loadDailySales() || []);\r\n\r\n  // Reset everything when drug type changes\r\n  useEffect(() => {\r\n    setSelectedSeed(null);\r\n    setCurrentMix([]);\r\n    setCurrentEffects([]);\r\n    setMixingHistory([]);\r\n    StorageService.saveSelectedDrugType(selectedDrugType);\r\n  }, [selectedDrugType]);\r\n\r\n  // Update effects when seed changes\r\n  useEffect(() => {\r\n    if (selectedSeed) {\r\n      // Reset mix when seed changes\r\n      setCurrentMix([]);\r\n      \r\n      const seedEffect = selectedSeed.effect;\r\n      setCurrentEffects([seedEffect]);\r\n      \r\n      // Initialize mixing history with just the seed\r\n      setMixingHistory([{\r\n        step: 0,\r\n        ingredient: \"Base Seed\",\r\n        effectsBefore: [],\r\n        effectsAfter: [seedEffect],\r\n        changes: [`Added ${seedEffect}`]\r\n      }]);\r\n      \r\n      StorageService.saveSelectedSeed(selectedSeed);\r\n      \r\n      // Update recommended price based on the seed's effect\r\n      const recommendedPrice = calculateRecommendedPrice([seedEffect], selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n    } else {\r\n      setCurrentEffects([]);\r\n      setMixingHistory([]);\r\n    }\r\n  }, [selectedSeed, selectedDrugType]);\r\n\r\n  // Sequential ingredient addition method\r\n  const addIngredient = (ingredient) => {\r\n    // Add ingredient to the current mix\r\n    const updatedMix = [...currentMix, ingredient];\r\n    setCurrentMix(updatedMix);\r\n    \r\n    // Recalculate effects using the sequential approach\r\n    if (selectedSeed) {\r\n      const result = calculateStrainEffects(\r\n        selectedSeed.effect, \r\n        updatedMix\r\n      );\r\n      \r\n      setCurrentEffects(result.finalEffects);\r\n      setMixingHistory(result.mixingHistory);\r\n      \r\n      // Update recommended price\r\n      const recommendedPrice = calculateRecommendedPrice(result.finalEffects, selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n      \r\n      // Save to storage\r\n      StorageService.saveCurrentMix(updatedMix);\r\n    }\r\n  };\r\n  \r\n  // Method to remove the last ingredient added\r\n  const removeLastIngredient = () => {\r\n    if (currentMix.length === 0) return;\r\n    \r\n    const updatedMix = currentMix.slice(0, currentMix.length - 1);\r\n    setCurrentMix(updatedMix);\r\n    \r\n    // Recalculate effects using the sequential approach\r\n    if (selectedSeed) {\r\n      const result = calculateStrainEffects(\r\n        selectedSeed.effect, \r\n        updatedMix\r\n      );\r\n      \r\n      setCurrentEffects(result.finalEffects);\r\n      setMixingHistory(result.mixingHistory);\r\n      \r\n      // Update recommended price\r\n      const recommendedPrice = calculateRecommendedPrice(result.finalEffects, selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n      \r\n      // Save to storage\r\n      StorageService.saveCurrentMix(updatedMix);\r\n    }\r\n  };\r\n  \r\n  // Method to reset the mix completely\r\n  const resetMix = () => {\r\n    setCurrentMix([]);\r\n    \r\n    if (selectedSeed) {\r\n      setCurrentEffects([selectedSeed.effect]);\r\n      setMixingHistory([{\r\n        step: 0,\r\n        ingredient: \"Base Seed\",\r\n        effectsBefore: [],\r\n        effectsAfter: [selectedSeed.effect],\r\n        changes: [`Added ${selectedSeed.effect}`]\r\n      }]);\r\n      \r\n      // Update recommended price\r\n      const recommendedPrice = calculateRecommendedPrice([selectedSeed.effect], selectedDrugType);\r\n      setSalePrice(recommendedPrice);\r\n      \r\n      // Save to storage\r\n      StorageService.saveCurrentMix([]);\r\n    } else {\r\n      setCurrentEffects([]);\r\n      setMixingHistory([]);\r\n    }\r\n  };\r\n  \r\n  // Method to finalize the mix and proceed to pricing/saving\r\n  const finalizeMix = () => {\r\n    if (currentMix.length > 0 && selectedSeed) {\r\n      // Activate the save prompt\r\n      setShowNamePrompt(true);\r\n    }\r\n  };\r\n\r\n  // Local wrapper functions for pricing calculations\r\n  const getTotalCost = useCallback(() => {\r\n    return calculateTotalCost(selectedSeed, currentMix);\r\n  }, [selectedSeed, currentMix]);\r\n  \r\n  const getProfit = useCallback(() => {\r\n    return calculateProfit(salePrice, selectedSeed, currentMix);\r\n  }, [salePrice, selectedSeed, currentMix]);\r\n  \r\n  const getProfitMargin = useCallback(() => {\r\n    return calculateProfitMargin(salePrice, selectedSeed, currentMix);\r\n  }, [salePrice, selectedSeed, currentMix]);\r\n  \r\n  const getTotalBatchProfit = useCallback(() => {\r\n    return calculateTotalBatchProfit(salePrice, selectedSeed, currentMix, priceMultiplier);\r\n  }, [salePrice, selectedSeed, currentMix, priceMultiplier]);\r\n  \r\n  const getPackagingProfit = useCallback(() => {\r\n    return calculatePackagingProfit(salePrice, selectedSeed, currentMix, packagingType);\r\n  }, [salePrice, selectedSeed, currentMix, packagingType]);\r\n  \r\n  const getTotalUnits = useCallback(() => {\r\n    return calculateTotalUnits(selectedSeed);\r\n  }, [selectedSeed]);\r\n\r\n  // Price/margin calculation handlers\r\n  const handleCalculateSalePriceFromMargin = () => {\r\n    if (targetMargin && getTotalCost() > 0) {\r\n      const calculatedPrice = calculateSalePriceFromMargin(targetMargin, selectedSeed, currentMix);\r\n      setSalePrice(calculatedPrice);\r\n    }\r\n  };\r\n\r\n  const handleCalculateMarginFromSalePrice = () => {\r\n    if (salePrice > 0 && getTotalCost() > 0) {\r\n      const margin = ((salePrice - getTotalCost()) / salePrice) * 100;\r\n      setTargetMargin(isNaN(margin) ? '' : margin.toFixed(2));\r\n    }\r\n  };\r\n\r\n  // Save mix function\r\n  const saveMix = (name) => {\r\n    if (!name.trim()) return;\r\n\r\n    const newMix = {\r\n      id: Date.now(),\r\n      name: name.trim(),\r\n      seed: selectedSeed,\r\n      drugType: selectedDrugType,\r\n      totalUnits: getTotalUnits(),\r\n      ingredients: [...currentMix],\r\n      effects: [...currentEffects],\r\n      mixingSequence: [...currentMix].map(ing => ing.name), // Store the exact sequence\r\n      salePrice: Math.round(parseFloat(salePrice)),\r\n      totalCost: getTotalCost(),\r\n      profit: getProfit(),\r\n      profitMargin: getProfitMargin(),\r\n      priceMultiplier: priceMultiplier,\r\n      packagingType: packagingType,\r\n      favorite: false,\r\n      dateCreated: new Date().toISOString()\r\n    };\r\n\r\n    setMixes(prev => [...prev, newMix]);\r\n    resetMix();\r\n    setSelectedSeed(null);\r\n    setSalePrice(0);\r\n  };\r\n\r\n  // Mix management functions\r\n  const removeMix = (id) => {\r\n    setMixes(prev => prev.filter(mix => mix.id !== id));\r\n  };\r\n  \r\n  // Toggle favorite status\r\n  const toggleFavorite = (id) => {\r\n    setMixes(prev => prev.map(mix => \r\n      mix.id === id ? { ...mix, favorite: !mix.favorite } : mix\r\n    ));\r\n  };\r\n  \r\n  // Production planning functions\r\n  const addToProduction = (strainId) => {\r\n    const strain = mixes.find(mix => mix.id === strainId);\r\n    if (!strain) return;\r\n    \r\n    // Default to production based on drug type yield\r\n    const defaultQuantity = calculateTotalUnits(strain.seed);\r\n    \r\n    // Create a production plan with properly calculated ingredient quantities\r\n    const productionPlan = createEnhancedProductionPlan(strain, defaultQuantity);\r\n    \r\n    setProductionPlans(prev => [...prev, productionPlan]);\r\n    // Switch to production tab\r\n    setActiveTab('production');\r\n  };\r\n  \r\n  // Calculate packaging needs for a given quantity\r\n  const calculatePackagingNeeds = (quantity, type) => {\r\n    if (type === 'baggies') {\r\n      return {\r\n        type: 'baggies',\r\n        quantity: quantity,\r\n        cost: quantity\r\n      };\r\n    } else {\r\n      const jarsNeeded = Math.ceil(quantity / 5);\r\n      return {\r\n        type: 'jars',\r\n        quantity: jarsNeeded,\r\n        cost: jarsNeeded * 3\r\n      };\r\n    }\r\n  };\r\n  \r\n  // Enhanced production plan creation with proper ingredient calculations\r\n  const createEnhancedProductionPlan = (strain, quantity) => {\r\n    // First, count how many times each ingredient appears in the mix sequence\r\n    const ingredientCounts = {};\r\n    \r\n    if (strain.mixingSequence) {\r\n      // Count ingredient usage from the mixing sequence\r\n      strain.mixingSequence.forEach(ingredientName => {\r\n        ingredientCounts[ingredientName] = (ingredientCounts[ingredientName] || 0) + 1;\r\n      });\r\n    } else if (strain.ingredients) {\r\n      // Fallback to ingredients array if mixingSequence not available\r\n      strain.ingredients.forEach(ingredient => {\r\n        const name = ingredient.name;\r\n        const qty = ingredient.quantity || 1;\r\n        ingredientCounts[name] = (ingredientCounts[name] || 0) + qty;\r\n      });\r\n    }\r\n    \r\n    // Now calculate the proper ingredient needs\r\n    const enhancedIngredientNeeds = [];\r\n    \r\n    // Add the seed/base precursor first\r\n    const seedsNeeded = Math.ceil(quantity / calculateTotalUnits(strain.seed));\r\n    const seedIngredient = {\r\n      name: strain.seed.name,\r\n      quantity: seedsNeeded,\r\n      totalCost: strain.seed.cost * seedsNeeded\r\n    };\r\n    enhancedIngredientNeeds.push(seedIngredient);\r\n    \r\n    // Add drug-specific base ingredients\r\n    if (strain.drugType === 'meth') {\r\n      // Add required meth production ingredients\r\n      enhancedIngredientNeeds.push({\r\n        name: \"Acid\",\r\n        quantity: seedsNeeded, // One per batch\r\n        totalCost: 40 * seedsNeeded\r\n      });\r\n      \r\n      enhancedIngredientNeeds.push({\r\n        name: \"Red Phosphorus\",\r\n        quantity: seedsNeeded, // One per batch\r\n        totalCost: 40 * seedsNeeded\r\n      });\r\n    } \r\n    else if (strain.drugType === 'cocaine') {\r\n      // Add required cocaine production ingredients\r\n      enhancedIngredientNeeds.push({\r\n        name: \"Coca Leaves\",\r\n        quantity: 20 * seedsNeeded, // 20 leaves per batch\r\n        totalCost: (strain.seed.cost / 10) * 20 * seedsNeeded // Estimate cost based on seed\r\n      });\r\n      \r\n      // Gasoline is already in common ingredients, but ensure it's added for cocaine\r\n      if (!ingredientCounts['Gasoline']) {\r\n        enhancedIngredientNeeds.push({\r\n          name: \"Gasoline\",\r\n          quantity: seedsNeeded, // One per batch\r\n          totalCost: 30 * seedsNeeded\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add all other ingredients with proper quantities\r\n    Object.entries(ingredientCounts).forEach(([name, count]) => {\r\n      // Find the ingredient in the strain's ingredients\r\n      const ingredient = strain.ingredients.find(ing => ing.name === name);\r\n      if (ingredient) {\r\n        enhancedIngredientNeeds.push({\r\n          name: name,\r\n          quantity: count * quantity, // Multiply by the production quantity\r\n          totalCost: ingredient.cost * count * quantity\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Add packaging needs\r\n    const packagingNeeded = calculatePackagingNeeds(quantity, strain.packagingType || 'baggies');\r\n    \r\n    // Calculate total production cost\r\n    const productionCost = enhancedIngredientNeeds.reduce((sum, ing) => sum + ing.totalCost, 0) + packagingNeeded.cost;\r\n    \r\n    // Expected revenue and profit\r\n    const expectedRevenue = strain.salePrice * quantity;\r\n    const expectedProfit = expectedRevenue - productionCost;\r\n    \r\n    // Create the production plan object\r\n    return {\r\n      id: Date.now(),\r\n      strainId: strain.id,\r\n      strainName: strain.name,\r\n      drugType: strain.drugType || 'weed',\r\n      plannedQuantity: quantity,\r\n      status: 'planned',\r\n      dateCreated: new Date().toISOString(),\r\n      dateSold: null,\r\n      totalIngredientNeeds: enhancedIngredientNeeds,\r\n      packagingNeeded: packagingNeeded,\r\n      productionCost: productionCost,\r\n      salePrice: strain.salePrice,\r\n      expectedRevenue: expectedRevenue,\r\n      expectedProfit: expectedProfit,\r\n      effects: strain.effects, // Make sure effects are passed through\r\n      productionStage: 'plan' // Start at planning stage\r\n    };\r\n  };\r\n  \r\n  // Function to update a production plan\r\n  const updateProductionPlan = (planId, updates) => {\r\n    setProductionPlans(prev => prev.map(plan => {\r\n      if (plan.id !== planId) return plan;\r\n      \r\n      // If quantity changed, recalculate everything\r\n      if (updates.plannedQuantity && updates.plannedQuantity !== plan.plannedQuantity) {\r\n        const strain = mixes.find(mix => mix.id === plan.strainId);\r\n        if (strain) {\r\n          // Use our enhanced function for recalculation\r\n          const updatedPlan = createEnhancedProductionPlan(strain, updates.plannedQuantity);\r\n          // Preserve the original ID and any stage-specific data\r\n          return { \r\n            ...updatedPlan, \r\n            id: plan.id, \r\n            dateCreated: plan.dateCreated,\r\n            productionStage: updates.productionStage || plan.productionStage,\r\n            purchasedIngredients: updates.purchasedIngredients || plan.purchasedIngredients,\r\n            cookingSteps: updates.cookingSteps || plan.cookingSteps,\r\n            sellingData: updates.sellingData || plan.sellingData\r\n          };\r\n        }\r\n      }\r\n      \r\n      // If price changed, recalculate revenue and profit\r\n      if (updates.salePrice && updates.salePrice !== plan.salePrice) {\r\n        const newExpectedRevenue = plan.plannedQuantity * updates.salePrice;\r\n        return {\r\n          ...plan,\r\n          ...updates,\r\n          expectedRevenue: newExpectedRevenue,\r\n          expectedProfit: newExpectedRevenue - plan.productionCost\r\n        };\r\n      }\r\n      \r\n      // For all other updates\r\n      return { ...plan, ...updates };\r\n    }));\r\n  };\r\n  \r\n  const markAsSold = (planId) => {\r\n    const plan = productionPlans.find(p => p.id === planId);\r\n    if (!plan || plan.status === 'sold') return;\r\n    \r\n    // Create a sale record\r\n    const saleRecord = {\r\n      id: Date.now(),\r\n      productionId: plan.id,\r\n      strainId: plan.strainId,\r\n      strainName: plan.strainName,\r\n      drugType: plan.drugType,\r\n      quantitySold: plan.plannedQuantity,\r\n      totalRevenue: plan.expectedRevenue,\r\n      totalCost: plan.productionCost,\r\n      profit: plan.expectedProfit,\r\n      dateSold: new Date().toISOString()\r\n    };\r\n    \r\n    // Update production plan status\r\n    updateProductionPlan(planId, { \r\n      status: 'sold',\r\n      dateSold: saleRecord.dateSold\r\n    });\r\n    \r\n    // Add to sales history\r\n    setSalesHistory(prev => [...prev, saleRecord]);\r\n  };\r\n  \r\n  const removeProductionPlan = (planId) => {\r\n    setProductionPlans(prev => prev.filter(plan => plan.id !== planId));\r\n  };\r\n\r\n  const reproduceProductionPlan = (originalPlan, newQuantity, quality) => {\r\n    // Get the original strain information\r\n    const strain = mixes.find(mix => mix.id === originalPlan.strainId);\r\n    \r\n    if (!strain) {\r\n      console.error(\"Unable to find strain for reproduction\");\r\n      return;\r\n    }\r\n    \r\n    // Calculate a new production plan with the updated quantity\r\n    const newPlan = calculateProductionPlan(strain, newQuantity, quality);\r\n    \r\n    // Add the new plan to production plans\r\n    setProductionPlans(prev => [...prev, newPlan]);\r\n    \r\n    // Switch to the production tab\r\n    setActiveTab('production');\r\n  };\r\n\r\n  // Sorting and filtering\r\n  const handleSort = (column) => {\r\n    if (sortColumn === column) {\r\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortColumn(column);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n  \r\n  // Tab switching\r\n  const handleTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n    StorageService.saveActiveTab(tab);\r\n  };\r\n\r\n  // Filter and sort mixes\r\n  const filteredAndSortedMixes = useMemo(() => {\r\n    // First filter by strain view (all or favorites)\r\n    let filtered = [...mixes];\r\n    \r\n    // Then apply additional filters\r\n    filtered = filtered.filter(mix => {\r\n      // Filter by strain name\r\n      if (filterOptions.name && !mix.name.toLowerCase().includes(filterOptions.name.toLowerCase())) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by drug type\r\n      if (filterOptions.drugType && mix.drugType !== filterOptions.drugType) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by seed type\r\n      if (filterOptions.seedType && !mix.seed.name.toLowerCase().includes(filterOptions.seedType.toLowerCase())) {\r\n        return false;\r\n      }\r\n      \r\n      // Filter by effect\r\n      if (filterOptions.effect) {\r\n        const hasEffect = mix.effects.some(\r\n          effect => effect.toLowerCase().includes(filterOptions.effect.toLowerCase())\r\n        );\r\n        if (!hasEffect) return false;\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    // Sort items\r\n    return filtered.sort((a, b) => {\r\n      if (!sortColumn) return 0;\r\n\r\n      let aValue = sortColumn === 'seed' ? a.seed.name : a[sortColumn];\r\n      let bValue = sortColumn === 'seed' ? b.seed.name : b[sortColumn];\r\n\r\n      if (typeof aValue === 'string') {\r\n        aValue = aValue.toLowerCase();\r\n        bValue = bValue.toLowerCase();\r\n      }\r\n\r\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n  }, [mixes, filterOptions, sortColumn, sortDirection]);\r\n\r\n  // Manual save function for the AutoSave component\r\n  const handleManualSave = useCallback(() => {\r\n    // Save all current state to storage\r\n    StorageService.saveSelectedDrugType(selectedDrugType);\r\n    StorageService.saveCurrentMix(currentMix);\r\n    StorageService.saveSelectedSeed(selectedSeed);\r\n    StorageService.saveMixes(mixes);\r\n    StorageService.saveProductionPlans(productionPlans);\r\n    StorageService.saveSalesHistory(salesHistory);\r\n    StorageService.saveActiveTab(activeTab);\r\n    StorageService.saveFilterOptions(filterOptions);\r\n    StorageService.saveSortSettings({ column: sortColumn, direction: sortDirection });\r\n    StorageService.savePriceSettings({\r\n      salePrice,\r\n      targetMargin,\r\n      priceMultiplier,\r\n      packagingType\r\n    });\r\n    StorageService.saveSupplies(supplies);\r\n    StorageService.saveSupplyHistory(supplyHistory);\r\n    StorageService.saveDealers(dealers);\r\n    StorageService.saveCrewMembers(crewMembers);\r\n    StorageService.saveDealerTransactions(dealerTransactions);\r\n    StorageService.saveDailySales(dailySales);\r\n  }, [\r\n    selectedDrugType, currentMix, selectedSeed, mixes, productionPlans, \r\n    salesHistory, activeTab, filterOptions, sortColumn, \r\n    sortDirection, salePrice, targetMargin, priceMultiplier, packagingType,\r\n    supplies, supplyHistory, dealers, crewMembers, dealerTransactions, dailySales\r\n  ]);\r\n\r\n  // Create a game state object to pass to AutoSave\r\n  const gameState = useMemo(() => ({\r\n    mixes,\r\n    productionPlans,\r\n    salesHistory,\r\n    activeTab,\r\n    filterOptions,\r\n    sortSettings: { column: sortColumn, direction: sortDirection },\r\n    priceSettings: { salePrice, targetMargin, priceMultiplier, packagingType },\r\n    currentMix,\r\n    selectedSeed,\r\n    selectedDrugType,\r\n    supplies,\r\n    supplyHistory,\r\n    dealers,\r\n    crewMembers,\r\n    dealerTransactions,\r\n    dailySales\r\n  }), [\r\n    mixes, productionPlans, salesHistory, activeTab, \r\n    filterOptions, sortColumn, sortDirection, salePrice, targetMargin, \r\n    priceMultiplier, packagingType, currentMix, selectedSeed, selectedDrugType,\r\n    supplies, supplyHistory, dealers, crewMembers, dealerTransactions, dailySales\r\n  ]);\r\n\r\n  // Save data to storage when it changes\r\n  useEffect(() => {\r\n    StorageService.saveMixes(mixes);\r\n  }, [mixes]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveProductionPlans(productionPlans);\r\n  }, [productionPlans]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSalesHistory(salesHistory);\r\n  }, [salesHistory]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveActiveTab(activeTab);\r\n  }, [activeTab]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveFilterOptions(filterOptions);\r\n  }, [filterOptions]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSortSettings({ column: sortColumn, direction: sortDirection });\r\n  }, [sortColumn, sortDirection]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.savePriceSettings({\r\n      salePrice,\r\n      targetMargin,\r\n      priceMultiplier,\r\n      packagingType\r\n    });\r\n  }, [salePrice, targetMargin, priceMultiplier, packagingType]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveCurrentMix(currentMix);\r\n  }, [currentMix]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSupplies(supplies);\r\n  }, [supplies]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveSupplyHistory(supplyHistory);\r\n  }, [supplyHistory]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveDealers(dealers);\r\n  }, [dealers]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveCrewMembers(crewMembers);\r\n  }, [crewMembers]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveDealerTransactions(dealerTransactions);\r\n  }, [dealerTransactions]);\r\n  \r\n  useEffect(() => {\r\n    StorageService.saveDailySales(dailySales);\r\n  }, [dailySales]);\r\n\r\n// Render the component\r\n      return (\r\n        <div className=\"bg-gradient-to-br from-gray-100 to-gray-50 min-h-screen flex justify-center items-start py-8\">\r\n          <div className=\"w-full max-w-5xl mx-auto p-4\">\r\n            <DopeyHeader />\r\n            \r\n            {/* Main Navigation Tabs */}\r\n            <div className=\"flex border-b border-gray-200 mb-6 overflow-x-auto\">\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'creator'\r\n              ? 'text-blue-600 border-b-2 border-blue-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('creator')}\r\n        >\r\n          <FlaskConical className=\"inline-block mr-1 w-4 h-4\" />\r\n          Creator\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'effects'\r\n              ? 'text-purple-600 border-b-2 border-purple-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('effects')}\r\n        >\r\n          <Beaker className=\"inline-block mr-1 w-4 h-4\" />\r\n          Effect Builder\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'saved'\r\n              ? 'text-green-600 border-b-2 border-green-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => {\r\n            handleTabChange('saved');\r\n          }}\r\n        >\r\n          <Heart className=\"inline-block mr-1 w-4 h-4\" />\r\n          My Strains\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'production'\r\n              ? 'text-indigo-600 border-b-2 border-indigo-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('production')}\r\n        >\r\n          <Factory className=\"inline-block mr-1 w-4 h-4\" />\r\n          Production\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'crew'\r\n              ? 'text-teal-600 border-b-2 border-teal-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('crew')}\r\n        >\r\n          <Users className=\"inline-block mr-1 w-4 h-4\" />\r\n          Crew\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'sales'\r\n              ? 'text-orange-600 border-b-2 border-orange-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('sales')}\r\n        >\r\n          <BarChart2 className=\"inline-block mr-1 w-4 h-4\" />\r\n          Sales\r\n        </button>\r\n        <button\r\n          className={`py-2 px-4 font-medium text-sm ${\r\n            activeTab === 'supply'\r\n              ? 'text-purple-600 border-b-2 border-purple-600'\r\n              : 'text-gray-500 hover:text-gray-700'\r\n          }`}\r\n          onClick={() => handleTabChange('supply')}\r\n        >\r\n          <Package className=\"inline-block mr-1 w-4 h-4\" />\r\n          Supplies\r\n        </button>\r\n      </div>\r\n\r\n      {/* Content based on active tab */}\r\n      {activeTab === 'creator' ? (\r\n        <div className=\"strain-card\">\r\n          {/* Drug Type Selection */}\r\n          <DrugTypeSelector \r\n            selectedDrugType={selectedDrugType}\r\n            onSelectDrugType={setSelectedDrugType}\r\n          />\r\n\r\n          {/* Seed Type Selection */}\r\n          <SeedSelector \r\n            seedTypes={seedTypes} \r\n            selectedSeed={selectedSeed} \r\n            onSelectSeed={setSelectedSeed}\r\n            selectedDrugType={selectedDrugType}\r\n          />\r\n\r\n          {/* Sequential Ingredients Selector */}\r\n          <SequentialIngredientsSelector\r\n            ingredients={ingredients}\r\n            currentMix={currentMix}\r\n            currentEffects={currentEffects}\r\n            mixingHistory={mixingHistory}\r\n            effectColors={effectColors}\r\n            additiveEffects={additiveEffects}\r\n            addIngredient={addIngredient}\r\n            removeLastIngredient={removeLastIngredient}\r\n            resetMix={resetMix}\r\n            finalizeMix={finalizeMix}\r\n            selectedDrugType={selectedDrugType}\r\n          />\r\n\r\n          {/* Current Mix Display */}\r\n          <CurrentMixDisplay \r\n            selectedSeed={selectedSeed}\r\n            currentMix={currentMix}\r\n            currentEffects={currentEffects}\r\n            effectColors={effectColors}\r\n            additiveEffects={additiveEffects}\r\n            calculateTotalCost={getTotalCost}\r\n            drugTypes={drugTypes}\r\n          />\r\n\r\n          {/* Packaging Type Selection */}\r\n          <PackagingSelector \r\n            packagingType={packagingType}\r\n            setPackagingType={setPackagingType}\r\n          />\r\n\r\n          {/* Price and Margin Inputs */}\r\n          <PriceMarginInputs \r\n            salePrice={salePrice} \r\n            targetMargin={targetMargin}\r\n            priceMultiplier={priceMultiplier}\r\n            setPriceMultiplier={setPriceMultiplier}\r\n            setSalePrice={setSalePrice}\r\n            setTargetMargin={setTargetMargin}\r\n            calculateMarginFromSalePrice={handleCalculateMarginFromSalePrice}\r\n            calculateSalePriceFromMargin={handleCalculateSalePriceFromMargin}\r\n            currentEffects={currentEffects}\r\n            productType={selectedDrugType}\r\n          />\r\n\r\n          {/* Profit Information Display */}\r\n          {selectedSeed && salePrice > 0 && (\r\n            <ProfitInfoDisplay \r\n              calculateProfit={getProfit}\r\n              calculateProfitMargin={getProfitMargin}\r\n              calculateTotalBuddyProfit={getTotalBatchProfit}\r\n              calculatePackagingProfit={getPackagingProfit}\r\n              priceMultiplier={priceMultiplier}\r\n              packagingType={packagingType}\r\n            />\r\n          )}\r\n\r\n          {/* Save Mix Button */}\r\n          <button\r\n            className=\"btn-primary\"\r\n            onClick={finalizeMix}\r\n            //disabled={!selectedSeed || currentMix.length === 0 || salePrice <= 0}\r\n            disabled={!selectedSeed || salePrice <= 0}\r\n          >\r\n            <CheckCircle className=\"mr-2 w-5 h-5\" />\r\n            Save Creation\r\n          </button>\r\n        </div>\r\n\r\n      ) : activeTab === 'effects' ? (\r\n        <EffectBuilderTab\r\n          seedTypes={seedTypes}\r\n          ingredients={ingredients}\r\n          effectColors={effectColors}\r\n          drugTypes={drugTypes}\r\n          calculateStrainEffects={calculateStrainEffects}\r\n        />\r\n      ) : activeTab === 'saved' ? (\r\n        <CombinedStrainsTab\r\n          mixes={filteredAndSortedMixes}\r\n          filterOptions={filterOptions}\r\n          setFilterOptions={setFilterOptions}\r\n          handleSort={handleSort}\r\n          sortColumn={sortColumn}\r\n          sortDirection={sortDirection}\r\n          removeMix={removeMix}\r\n          addToProduction={addToProduction}\r\n          toggleFavorite={toggleFavorite}\r\n          effectColors={effectColors}\r\n          drugTypes={drugTypes}\r\n        />\r\n      ) : activeTab === 'production' ? (\r\n        <ProductionPlanningTab\r\n          strains={mixes}\r\n          productionPlans={productionPlans}\r\n          updateProductionPlan={updateProductionPlan}\r\n          markAsSold={markAsSold}\r\n          removeProductionPlan={removeProductionPlan}\r\n          reproduceProductionPlan={reproduceProductionPlan}\r\n          drugTypes={drugTypes}\r\n          dealers={dealers}\r\n          dailySales={dailySales}\r\n          setDailySales={setDailySales}\r\n          dealerTransactions={dealerTransactions}\r\n          setDealerTransactions={setDealerTransactions}\r\n        />\r\n      ) : activeTab === 'supply' ? (\r\n        <SupplyManagementTab\r\n          supplies={supplies}\r\n          setSupplies={setSupplies}\r\n          supplyHistory={supplyHistory}\r\n          setSupplyHistory={setSupplyHistory}\r\n          productionPlans={productionPlans}\r\n          drugTypes={drugTypes}\r\n          seedTypes={seedTypes}\r\n          ingredients={ingredients}\r\n        />\r\n      ) : activeTab === 'sales' ? (\r\n        <SalesHistoryTab\r\n          salesHistory={salesHistory}\r\n          reproduceProductionPlan={reproduceProductionPlan}\r\n          drugTypes={drugTypes}\r\n        />\r\n      ) : activeTab === 'crew' ? (\r\n        <CrewManagementTab\r\n          dealers={dealers}\r\n          setDealers={setDealers}\r\n          crewMembers={crewMembers}\r\n          setCrewMembers={setCrewMembers}\r\n          dealerTransactions={dealerTransactions}\r\n          setDealerTransactions={setDealerTransactions}\r\n          dailySales={dailySales}\r\n          setDailySales={setDailySales}\r\n          drugTypes={drugTypes}\r\n        />\r\n      ) : null}\r\n\r\n      {/* Name Prompt Modal */}\r\n      <NamePromptModal\r\n        isOpen={showNamePrompt}\r\n        onClose={() => setShowNamePrompt(false)}\r\n        onSave={saveMix}\r\n        initialName={''}\r\n      />\r\n    </div>\r\n\r\n    {/* AutoSave component */}\r\n    <AutoSave \r\n      gameState={gameState}\r\n      onManualSave={handleManualSave}\r\n    />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default StrainCreator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}