{"ast":null,"code":"// pricing.js - Centralized pricing functions for the application\n// Calculate effect multiplier for price calculations\nexport const calculateEffectMultiplier=currentEffects=>{// Add a safety check to ensure currentEffects is an array\nif(!currentEffects||!Array.isArray(currentEffects)||currentEffects.length===0){return 0;}// Multiplier values for each effect\nconst effectMultipliers={'Anti-Gravity':0.54,'Athletic':0.32,'Balding':0.30,'Bright-Eyed':0.40,'Calming':0.10,'Calorie-Dense':0.28,'Cyclopean':0.56,'Disorienting':0.00,'Electrifying':0.50,'Energizing':0.22,'Euphoric':0.18,'Explosive':0.00,'Focused':0.16,'Foggy':0.36,'Gingeritis':0.20,'Glowing':0.48,'Jennerising':0.42,'Laxative':0.00,'Long-Faced':0.52,'Munchies':0.12,'Paranoia':0.00,'Refreshing':0.14,'Schizophrenia':0.00,'Sedating':0.26,'Seizure-Inducing':0.00,'Shrinking':0.60,'Slippery':0.34,'Smelly':0.00,'Sneaky':0.24,'Spicy':0.38,'Thought-Provoking':0.44,'Toxic':0.00,'Tropic Thunder':0.46,'Zombifying':0.58};// Sum up the multipliers for all effects\nreturn currentEffects.reduce((total,effect)=>{return total+(effectMultipliers[effect]||0);},0);};// Calculate recommended price based on drug type and effects\nexport const calculateRecommendedPrice=function(effects){let productType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Weed';// Add safety check for effects\nif(!effects||!Array.isArray(effects)){effects=[];}// Get base price based on drug type\nconst basePrice=productType==='Weed'?35:productType==='Meth'?70:productType==='Cocaine'?90:35;const effectMultiplier=calculateEffectMultiplier(effects);return Math.round(basePrice*(1+effectMultiplier));};// Calculate total yield units based on drug type\nexport const calculateTotalUnits=selectedSeed=>{if(!selectedSeed)return 0;if(selectedSeed.drugType==='weed'){return 12;// Weed yields 12 buds per seed\n}else if(selectedSeed.drugType==='meth'){return 10;// Meth yields 10 crystals per batch\n}else if(selectedSeed.drugType==='cocaine'){return 10;// Cocaine yields 10 grams per batch\n}return 12;// Default fallback\n};// Calculate total ingredient cost\nexport const calculateIngredientCost=currentMix=>{if(!currentMix||!Array.isArray(currentMix)){return 0;}return currentMix.reduce((total,ingredient)=>{const quantity=ingredient.quantity||1;return total+ingredient.cost*quantity;},0);};// Calculate total cost including seed cost per unit\nexport const calculateTotalCost=(selectedSeed,currentMix)=>{if(!selectedSeed)return 0;if(!currentMix||!Array.isArray(currentMix)){currentMix=[];}const ingredientsCost=calculateIngredientCost(currentMix);// Calculate seed cost per unit based on drug type\nlet seedCostPerUnit;const totalUnits=calculateTotalUnits(selectedSeed);seedCostPerUnit=selectedSeed.cost/totalUnits;return seedCostPerUnit+ingredientsCost;};// Calculate profit per unit\nexport const calculateProfit=(salePrice,selectedSeed,currentMix)=>{return salePrice-calculateTotalCost(selectedSeed,currentMix);};// Calculate profit margin percentage\nexport const calculateProfitMargin=(salePrice,selectedSeed,currentMix)=>{const cost=calculateTotalCost(selectedSeed,currentMix);if(cost===0||salePrice===0)return 0;return((salePrice-cost)/salePrice*100).toFixed(1);};// Calculate total profit for entire batch with multiplier\nexport const calculateTotalBatchProfit=(salePrice,selectedSeed,currentMix,priceMultiplier)=>{const profitPerUnit=calculateProfit(salePrice,selectedSeed,currentMix);const totalUnits=calculateTotalUnits(selectedSeed);return profitPerUnit*totalUnits*priceMultiplier;};// Calculate packaging costs and profit based on drug type\nexport const calculatePackagingProfit=(salePrice,selectedSeed,currentMix,packagingType)=>{const profitPerUnit=calculateProfit(salePrice,selectedSeed,currentMix);const totalUnits=calculateTotalUnits(selectedSeed);if(packagingType==='baggies'){// $1 per baggie, one unit per baggie\nconst packagingCost=1*totalUnits;return profitPerUnit*totalUnits-packagingCost;}else{// Jars: $3 per jar, 5 units per jar, with the last jar potentially not full\nconst jarsNeeded=Math.ceil(totalUnits/5);const packagingCost=3*jarsNeeded;return profitPerUnit*totalUnits-packagingCost;}};// Calculate the sale price from a target margin\nexport const calculateSalePriceFromMargin=(targetMargin,selectedSeed,currentMix)=>{if(!targetMargin||!selectedSeed)return 0;const cost=calculateTotalCost(selectedSeed,currentMix);if(cost===0)return 0;const margin=parseFloat(targetMargin)/100;const calculatedPrice=cost/(1-margin);return Math.round(calculatedPrice);};// Calculate packaging needs for a given quantity\nexport const calculatePackagingNeeds=(quantity,type)=>{if(type==='baggies'){return{type:'baggies',quantity:quantity,cost:quantity};}else{const jarsNeeded=Math.ceil(quantity/5);return{type:'jars',quantity:jarsNeeded,cost:jarsNeeded*3};}};// Calculate production plan data for a strain\nexport const calculateProductionPlan=(strain,quantity)=>{// Safety checks\nif(!strain||!strain.seed)return null;// Ensure quantity is a valid number\nquantity=parseInt(quantity)||calculateTotalUnits(strain.seed);const seedsOrBatchesNeeded=Math.ceil(quantity/calculateTotalUnits(strain.seed));const seedCost=seedsOrBatchesNeeded*strain.seed.cost;const ingredientsNeeded=(strain.ingredients||[]).map(ingredient=>{const quantity=ingredient.quantity||1;return{name:ingredient.name,quantity:quantity,totalCost:ingredient.cost*quantity};});const seedIngredient={name:strain.seed.name,quantity:seedsOrBatchesNeeded,totalCost:seedCost};const packagingNeeded=calculatePackagingNeeds(quantity,strain.packagingType||'baggies');const productionCost=seedCost+(strain.ingredients||[]).reduce((sum,ing)=>{const quantity=ing.quantity||1;return sum+ing.cost*quantity;},0)+packagingNeeded.cost;const expectedRevenue=strain.salePrice*quantity;const expectedProfit=expectedRevenue-productionCost;return{id:Date.now(),strainId:strain.id,strainName:strain.name,drugType:strain.drugType||'weed',plannedQuantity:quantity,status:'planned',dateCreated:new Date().toISOString(),dateSold:null,totalIngredientNeeds:[seedIngredient,...ingredientsNeeded],packagingNeeded:packagingNeeded,productionCost:productionCost,expectedRevenue:expectedRevenue,expectedProfit:expectedProfit};};","map":{"version":3,"names":["calculateEffectMultiplier","currentEffects","Array","isArray","length","effectMultipliers","reduce","total","effect","calculateRecommendedPrice","effects","productType","arguments","undefined","basePrice","effectMultiplier","Math","round","calculateTotalUnits","selectedSeed","drugType","calculateIngredientCost","currentMix","ingredient","quantity","cost","calculateTotalCost","ingredientsCost","seedCostPerUnit","totalUnits","calculateProfit","salePrice","calculateProfitMargin","toFixed","calculateTotalBatchProfit","priceMultiplier","profitPerUnit","calculatePackagingProfit","packagingType","packagingCost","jarsNeeded","ceil","calculateSalePriceFromMargin","targetMargin","margin","parseFloat","calculatedPrice","calculatePackagingNeeds","type","calculateProductionPlan","strain","seed","parseInt","seedsOrBatchesNeeded","seedCost","ingredientsNeeded","ingredients","map","name","totalCost","seedIngredient","packagingNeeded","productionCost","sum","ing","expectedRevenue","expectedProfit","id","Date","now","strainId","strainName","plannedQuantity","status","dateCreated","toISOString","dateSold","totalIngredientNeeds"],"sources":["C:/Users/joshu/OneDrive/Documents/_Technical Projects/Doponomics/dopeonomics/src/pricing.js"],"sourcesContent":["// pricing.js - Centralized pricing functions for the application\r\n\r\n// Calculate effect multiplier for price calculations\r\nexport const calculateEffectMultiplier = (currentEffects) => {\r\n  // Add a safety check to ensure currentEffects is an array\r\n  if (!currentEffects || !Array.isArray(currentEffects) || currentEffects.length === 0) {\r\n    return 0;\r\n  }\r\n  \r\n  // Multiplier values for each effect\r\n  const effectMultipliers = {\r\n    'Anti-Gravity': 0.54,\r\n    'Athletic': 0.32,\r\n    'Balding': 0.30,\r\n    'Bright-Eyed': 0.40,\r\n    'Calming': 0.10,\r\n    'Calorie-Dense': 0.28,\r\n    'Cyclopean': 0.56,\r\n    'Disorienting': 0.00,\r\n    'Electrifying': 0.50,\r\n    'Energizing': 0.22,\r\n    'Euphoric': 0.18,\r\n    'Explosive': 0.00,\r\n    'Focused': 0.16,\r\n    'Foggy': 0.36,\r\n    'Gingeritis': 0.20,\r\n    'Glowing': 0.48,\r\n    'Jennerising': 0.42,\r\n    'Laxative': 0.00,\r\n    'Long-Faced': 0.52,\r\n    'Munchies': 0.12,\r\n    'Paranoia': 0.00,\r\n    'Refreshing': 0.14,\r\n    'Schizophrenia': 0.00,\r\n    'Sedating': 0.26,\r\n    'Seizure-Inducing': 0.00,\r\n    'Shrinking': 0.60,\r\n    'Slippery': 0.34,\r\n    'Smelly': 0.00,\r\n    'Sneaky': 0.24,\r\n    'Spicy': 0.38,\r\n    'Thought-Provoking': 0.44,\r\n    'Toxic': 0.00,\r\n    'Tropic Thunder': 0.46,\r\n    'Zombifying': 0.58\r\n  };\r\n  \r\n  // Sum up the multipliers for all effects\r\n  return currentEffects.reduce((total, effect) => {\r\n    return total + (effectMultipliers[effect] || 0);\r\n  }, 0);\r\n};\r\n\r\n// Calculate recommended price based on drug type and effects\r\nexport const calculateRecommendedPrice = (effects, productType = 'Weed') => {\r\n  // Add safety check for effects\r\n  if (!effects || !Array.isArray(effects)) {\r\n    effects = [];\r\n  }\r\n  \r\n  // Get base price based on drug type\r\n  const basePrice = productType === 'Weed' ? 35 : \r\n                    productType === 'Meth' ? 70 : \r\n                    productType === 'Cocaine' ? 90 : 35;\r\n  \r\n  const effectMultiplier = calculateEffectMultiplier(effects);\r\n  return Math.round(basePrice * (1 + effectMultiplier));\r\n};\r\n\r\n// Calculate total yield units based on drug type\r\nexport const calculateTotalUnits = (selectedSeed) => {\r\n  if (!selectedSeed) return 0;\r\n  \r\n  if (selectedSeed.drugType === 'weed') {\r\n    return 12; // Weed yields 12 buds per seed\r\n  } else if (selectedSeed.drugType === 'meth') {\r\n    return 10; // Meth yields 10 crystals per batch\r\n  } else if (selectedSeed.drugType === 'cocaine') {\r\n    return 10; // Cocaine yields 10 grams per batch\r\n  }\r\n  \r\n  return 12; // Default fallback\r\n};\r\n\r\n// Calculate total ingredient cost\r\nexport const calculateIngredientCost = (currentMix) => {\r\n  if (!currentMix || !Array.isArray(currentMix)) {\r\n    return 0;\r\n  }\r\n  \r\n  return currentMix.reduce((total, ingredient) => {\r\n    const quantity = ingredient.quantity || 1;\r\n    return total + (ingredient.cost * quantity);\r\n  }, 0);\r\n};\r\n\r\n// Calculate total cost including seed cost per unit\r\nexport const calculateTotalCost = (selectedSeed, currentMix) => {\r\n  if (!selectedSeed) return 0;\r\n  if (!currentMix || !Array.isArray(currentMix)) {\r\n    currentMix = [];\r\n  }\r\n  \r\n  const ingredientsCost = calculateIngredientCost(currentMix);\r\n  \r\n  // Calculate seed cost per unit based on drug type\r\n  let seedCostPerUnit;\r\n  const totalUnits = calculateTotalUnits(selectedSeed);\r\n  \r\n  seedCostPerUnit = selectedSeed.cost / totalUnits;\r\n  \r\n  return seedCostPerUnit + ingredientsCost;\r\n};\r\n\r\n// Calculate profit per unit\r\nexport const calculateProfit = (salePrice, selectedSeed, currentMix) => {\r\n  return salePrice - calculateTotalCost(selectedSeed, currentMix);\r\n};\r\n\r\n// Calculate profit margin percentage\r\nexport const calculateProfitMargin = (salePrice, selectedSeed, currentMix) => {\r\n  const cost = calculateTotalCost(selectedSeed, currentMix);\r\n  if (cost === 0 || salePrice === 0) return 0;\r\n  return ((salePrice - cost) / salePrice * 100).toFixed(1);\r\n};\r\n\r\n// Calculate total profit for entire batch with multiplier\r\nexport const calculateTotalBatchProfit = (salePrice, selectedSeed, currentMix, priceMultiplier) => {\r\n  const profitPerUnit = calculateProfit(salePrice, selectedSeed, currentMix);\r\n  const totalUnits = calculateTotalUnits(selectedSeed);\r\n  return profitPerUnit * totalUnits * priceMultiplier;\r\n};\r\n\r\n// Calculate packaging costs and profit based on drug type\r\nexport const calculatePackagingProfit = (salePrice, selectedSeed, currentMix, packagingType) => {\r\n  const profitPerUnit = calculateProfit(salePrice, selectedSeed, currentMix);\r\n  const totalUnits = calculateTotalUnits(selectedSeed);\r\n  \r\n  if (packagingType === 'baggies') {\r\n    // $1 per baggie, one unit per baggie\r\n    const packagingCost = 1 * totalUnits;\r\n    return (profitPerUnit * totalUnits) - packagingCost;\r\n  } else {\r\n    // Jars: $3 per jar, 5 units per jar, with the last jar potentially not full\r\n    const jarsNeeded = Math.ceil(totalUnits / 5);\r\n    const packagingCost = 3 * jarsNeeded;\r\n    return (profitPerUnit * totalUnits) - packagingCost;\r\n  }\r\n};\r\n\r\n// Calculate the sale price from a target margin\r\nexport const calculateSalePriceFromMargin = (targetMargin, selectedSeed, currentMix) => {\r\n  if (!targetMargin || !selectedSeed) return 0;\r\n  \r\n  const cost = calculateTotalCost(selectedSeed, currentMix);\r\n  if (cost === 0) return 0;\r\n  \r\n  const margin = parseFloat(targetMargin) / 100;\r\n  const calculatedPrice = cost / (1 - margin);\r\n  return Math.round(calculatedPrice);\r\n};\r\n\r\n// Calculate packaging needs for a given quantity\r\nexport const calculatePackagingNeeds = (quantity, type) => {\r\n  if (type === 'baggies') {\r\n    return {\r\n      type: 'baggies',\r\n      quantity: quantity,\r\n      cost: quantity\r\n    };\r\n  } else {\r\n    const jarsNeeded = Math.ceil(quantity / 5);\r\n    return {\r\n      type: 'jars',\r\n      quantity: jarsNeeded,\r\n      cost: jarsNeeded * 3\r\n    };\r\n  }\r\n};\r\n\r\n// Calculate production plan data for a strain\r\nexport const calculateProductionPlan = (strain, quantity) => {\r\n  // Safety checks\r\n  if (!strain || !strain.seed) return null;\r\n  \r\n  // Ensure quantity is a valid number\r\n  quantity = parseInt(quantity) || calculateTotalUnits(strain.seed);\r\n  \r\n  const seedsOrBatchesNeeded = Math.ceil(quantity / calculateTotalUnits(strain.seed));\r\n  const seedCost = seedsOrBatchesNeeded * strain.seed.cost;\r\n  \r\n  const ingredientsNeeded = (strain.ingredients || []).map(ingredient => {\r\n    const quantity = ingredient.quantity || 1;\r\n    return {\r\n      name: ingredient.name,\r\n      quantity: quantity,\r\n      totalCost: ingredient.cost * quantity\r\n    };\r\n  });\r\n  \r\n  const seedIngredient = {\r\n    name: strain.seed.name,\r\n    quantity: seedsOrBatchesNeeded,\r\n    totalCost: seedCost\r\n  };\r\n  \r\n  const packagingNeeded = calculatePackagingNeeds(quantity, strain.packagingType || 'baggies');\r\n  \r\n  const productionCost = seedCost + \r\n    (strain.ingredients || []).reduce((sum, ing) => {\r\n      const quantity = ing.quantity || 1;\r\n      return sum + (ing.cost * quantity);\r\n    }, 0) + \r\n    packagingNeeded.cost;\r\n  \r\n  const expectedRevenue = strain.salePrice * quantity;\r\n  const expectedProfit = expectedRevenue - productionCost;\r\n  \r\n  return {\r\n    id: Date.now(),\r\n    strainId: strain.id,\r\n    strainName: strain.name,\r\n    drugType: strain.drugType || 'weed',\r\n    plannedQuantity: quantity,\r\n    status: 'planned',\r\n    dateCreated: new Date().toISOString(),\r\n    dateSold: null,\r\n    totalIngredientNeeds: [seedIngredient, ...ingredientsNeeded],\r\n    packagingNeeded: packagingNeeded,\r\n    productionCost: productionCost,\r\n    expectedRevenue: expectedRevenue,\r\n    expectedProfit: expectedProfit\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}